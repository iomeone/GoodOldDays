{-# GHC_PRAGMA INTERFACE VERSION 6 #-}
interface PreludeGlaST where
import PreludeArray(Array(..), _ByteArray(..))
import PreludeBuiltin(Char(..), Double(..), Float(..), Int(..), List(..), Tuple0, Tuple2, _Addr(..), _RealWorld(..), _State(..))
import PreludeCore(Bool(..), Eq(..), Ix(..), _CCallable(..), _CReturnable(..))
import PreludePrimIO(appendChanPrimIO, appendFilePrimIO, fixPrimIO, getArgsPrimIO, listPrimIO, mapAndUnzipPrimIO, mapPrimIO, readChanPrimIO, returnPrimIO, seqPrimIO, thenPrimIO, unsafeInterleavePrimIO, unsafePerformPrimIO)
import Stdio(_FILE(..), fclose, fdopen, fflush, fopen, fread, freopen, fwrite)
infixr 1 `seqPrimIO`
infixr 9 `seqST`
infixr 9 `seqStrictlyST`
infixr 1 `thenPrimIO`
infixr 9 `thenST`
infixr 9 `thenStrictlyST`
data Array a b   = _Array (a, a) (Array# b)
type MutableVar a b = _MutableArray a Int b
type ST a b = _State a -> (b, _State a)
data _ByteArray a   = _ByteArray (a, a) ByteArray#
data _FILE   = _FILE Addr#
data _MutableArray a b c   = _MutableArray (b, b) (MutableArray# a c)
data _MutableByteArray a b   = _MutableByteArray (b, b) (MutableByteArray# a)
_freezeArray :: Ix b => _MutableArray a b c -> _State a -> (Array b c, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _S_ "U(ASLA)U(U(LL)P)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ _N_, Int, _N_ ] 1 { _A_ 2 _U_ 11 _N_ _S_ "U(U(U(P)U(P))P)U(P)" {_A_ 4 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ }, [ _N_, (Int, Int), _N_ ] 1 { _A_ 2 _U_ 11 _N_ _S_ "U(U(SS)P)U(P)" {_A_ 4 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
_newArray :: Ix b => (b, b) -> c -> _State a -> (_MutableArray a b c, _State a)
	{-# GHC_PRAGMA _A_ 4 _U_ 1221 _N_ _S_ "U(ASLA)U(LL)LU(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ _N_, Int, _N_ ] 1 { _A_ 3 _U_ 121 _N_ _S_ "U(U(P)U(P))LU(P)" {_A_ 4 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ }, [ _N_, (Int, Int), _N_ ] 1 { _A_ 3 _U_ 121 _N_ _S_ "U(SS)LU(P)" {_A_ 4 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
appendChanPrimIO :: [Char] -> [Char] -> _State _RealWorld -> ((), _State _RealWorld)
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _N_ _N_ _N_ #-}
appendFilePrimIO :: [Char] -> [Char] -> _State _RealWorld -> ((), _State _RealWorld)
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _N_ _N_ _N_ #-}
boundsOfArray :: Ix c => _MutableArray a c b -> (c, c)
	{-# GHC_PRAGMA _A_ 2 _U_ 01 _N_ _S_ "AU(U(LL)P)" {_A_ 3 _U_ 220 _N_ _N_ _F_ _IF_ARGS_ 3 3 XXX 3 _/\_ u0 u1 u2 -> \ (u3 :: u2) (u4 :: u2) (u5 :: MutableArray# u0 u1) -> _!_ _TUP_2 [u2, u2] [u3, u4] _N_} _F_ _IF_ARGS_ 3 2 XC 2 _/\_ u0 u1 u2 -> \ (u3 :: {{Ix u2}}) (u4 :: _MutableArray u0 u2 u1) -> case u4 of { _ALG_ _MutableArray (u5 :: (u2, u2)) (u6 :: MutableArray# u0 u1) -> u5; _NO_DEFLT_ } _SPECIALISE_ [ _N_, _N_, Int ] 1 { _A_ 1 _U_ 1 _N_ _S_ "U(U(LL)P)" {_A_ 3 _U_ 220 _N_ _N_ _F_ _IF_ARGS_ 2 3 XXX 3 _/\_ u0 u1 -> \ (u2 :: Int) (u3 :: Int) (u4 :: MutableArray# u0 u1) -> _!_ _TUP_2 [Int, Int] [u2, u3] _N_} _F_ _IF_ARGS_ 2 1 C 2 _/\_ u0 u1 -> \ (u2 :: _MutableArray u0 Int u1) -> case u2 of { _ALG_ _MutableArray (u3 :: (Int, Int)) (u4 :: MutableArray# u0 u1) -> u3; _NO_DEFLT_ } _N_ } #-}
boundsOfByteArray :: Ix b => _MutableByteArray a b -> (b, b)
	{-# GHC_PRAGMA _A_ 2 _U_ 01 _N_ _S_ "AU(U(LL)P)" {_A_ 3 _U_ 220 _N_ _N_ _F_ _IF_ARGS_ 2 3 XXX 3 _/\_ u0 u1 -> \ (u2 :: u1) (u3 :: u1) (u4 :: MutableByteArray# u0) -> _!_ _TUP_2 [u1, u1] [u2, u3] _N_} _F_ _IF_ARGS_ 2 2 XC 2 _/\_ u0 u1 -> \ (u2 :: {{Ix u1}}) (u3 :: _MutableByteArray u0 u1) -> case u3 of { _ALG_ _MutableByteArray (u4 :: (u1, u1)) (u5 :: MutableByteArray# u0) -> u4; _NO_DEFLT_ } _SPECIALISE_ [ _N_, Int ] 1 { _A_ 1 _U_ 1 _N_ _S_ "U(U(LL)P)" {_A_ 3 _U_ 220 _N_ _N_ _F_ _IF_ARGS_ 1 3 XXX 3 _/\_ u0 -> \ (u1 :: Int) (u2 :: Int) (u3 :: MutableByteArray# u0) -> _!_ _TUP_2 [Int, Int] [u1, u2] _N_} _F_ _IF_ARGS_ 1 1 C 2 _/\_ u0 -> \ (u1 :: _MutableByteArray u0 Int) -> case u1 of { _ALG_ _MutableByteArray (u2 :: (Int, Int)) (u3 :: MutableByteArray# u0) -> u2; _NO_DEFLT_ } _N_ } #-}
fixPrimIO :: (a -> _State _RealWorld -> (a, _State _RealWorld)) -> _State _RealWorld -> (a, _State _RealWorld)
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _N_ _N_ #-}
fixST :: (b -> _State a -> (b, _State a)) -> _State a -> (b, _State a)
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "SL" _N_ _N_ #-}
forkPrimIO :: (_State _RealWorld -> (a, _State _RealWorld)) -> _State _RealWorld -> (a, _State _RealWorld)
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _N_ _F_ _IF_ARGS_ 1 0 X 1 _/\_ u0 -> _TYAPP_  _TYAPP_  _ORIG_ PreludeGlaST forkST { _RealWorld } { u0 } _N_ #-}
forkST :: (_State a -> (b, _State a)) -> _State a -> (b, _State a)
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _N_ _N_ _N_ #-}
freezeAddrArray :: Ix b => _MutableByteArray a b -> _State a -> (_ByteArray b, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _S_ "U(ASLA)U(U(LL)P)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
freezeArray :: Ix b => _MutableArray a b c -> _State a -> (Array b c, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludeGlaST _freezeArray _N_ #-}
freezeCharArray :: Ix b => _MutableByteArray a b -> _State a -> (_ByteArray b, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _S_ "U(ASLA)U(U(LL)P)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ _N_, Int ] 1 { _A_ 2 _U_ 11 _N_ _S_ "U(U(U(P)U(P))P)U(P)" {_A_ 4 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
freezeDoubleArray :: Ix b => _MutableByteArray a b -> _State a -> (_ByteArray b, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _S_ "U(ASLA)U(U(LL)P)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
freezeFloatArray :: Ix b => _MutableByteArray a b -> _State a -> (_ByteArray b, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _S_ "U(ASLA)U(U(LL)P)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
freezeIntArray :: Ix b => _MutableByteArray a b -> _State a -> (_ByteArray b, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _S_ "U(ASLA)U(U(LL)P)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
getArgsPrimIO :: _State _RealWorld -> ([[Char]], _State _RealWorld)
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
indexAddrArray :: Ix a => _ByteArray a -> a -> _Addr
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "U(AASA)U(LP)L" {_A_ 4 _U_ 1222 _N_ _N_ _F_ _IF_ARGS_ 1 4 XXXX 7 _/\_ u0 -> \ (u1 :: (u0, u0) -> u0 -> Int) (u2 :: (u0, u0)) (u3 :: ByteArray#) (u4 :: u0) -> case _APP_  u1 [ u2, u4 ] of { _ALG_ I# (u5 :: Int#) -> case _#_ indexAddrArray# [] [u3, u5] of { _PRIM_ (u6 :: Addr#) -> _!_ A# [] [u6] }; _NO_DEFLT_ } _N_} _F_ _ALWAYS_ _/\_ u0 -> \ (u1 :: {{Ix u0}}) (u2 :: _ByteArray u0) (u3 :: u0) -> case u1 of { _ALG_ _TUP_4 (u4 :: {{Ord u0}}) (u5 :: (u0, u0) -> [u0]) (u6 :: (u0, u0) -> u0 -> Int) (u7 :: (u0, u0) -> u0 -> Bool) -> case u2 of { _ALG_ _ByteArray (u8 :: (u0, u0)) (u9 :: ByteArray#) -> case _APP_  u6 [ u8, u3 ] of { _ALG_ I# (ua :: Int#) -> case _#_ indexAddrArray# [] [u9, ua] of { _PRIM_ (ub :: Addr#) -> _!_ A# [] [ub] }; _NO_DEFLT_ }; _NO_DEFLT_ }; _NO_DEFLT_ } _SPECIALISE_ [ Int ] 1 { _A_ 2 _U_ 11 _N_ _S_ "U(U(U(P)U(P))P)U(P)" {_A_ 4 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
indexAddrOffAddr :: _Addr -> Int -> _Addr
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 2 XX 3 \ (u0 :: Addr#) (u1 :: Int#) -> case _#_ indexAddrOffAddr# [] [u0, u1] of { _PRIM_ (u2 :: Addr#) -> _!_ A# [] [u2] } _N_} _F_ _IF_ARGS_ 0 2 CC 5 \ (u0 :: _Addr) (u1 :: Int) -> case u0 of { _ALG_ A# (u2 :: Addr#) -> case u1 of { _ALG_ I# (u3 :: Int#) -> case _#_ indexAddrOffAddr# [] [u2, u3] of { _PRIM_ (u4 :: Addr#) -> _!_ A# [] [u4] }; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ #-}
indexCharArray :: Ix a => _ByteArray a -> a -> Char
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "U(AASA)U(LP)L" {_A_ 4 _U_ 1222 _N_ _N_ _F_ _IF_ARGS_ 1 4 XXXX 7 _/\_ u0 -> \ (u1 :: (u0, u0) -> u0 -> Int) (u2 :: (u0, u0)) (u3 :: ByteArray#) (u4 :: u0) -> case _APP_  u1 [ u2, u4 ] of { _ALG_ I# (u5 :: Int#) -> case _#_ indexCharArray# [] [u3, u5] of { _PRIM_ (u6 :: Char#) -> _!_ C# [] [u6] }; _NO_DEFLT_ } _N_} _F_ _ALWAYS_ _/\_ u0 -> \ (u1 :: {{Ix u0}}) (u2 :: _ByteArray u0) (u3 :: u0) -> case u1 of { _ALG_ _TUP_4 (u4 :: {{Ord u0}}) (u5 :: (u0, u0) -> [u0]) (u6 :: (u0, u0) -> u0 -> Int) (u7 :: (u0, u0) -> u0 -> Bool) -> case u2 of { _ALG_ _ByteArray (u8 :: (u0, u0)) (u9 :: ByteArray#) -> case _APP_  u6 [ u8, u3 ] of { _ALG_ I# (ua :: Int#) -> case _#_ indexCharArray# [] [u9, ua] of { _PRIM_ (ub :: Char#) -> _!_ C# [] [ub] }; _NO_DEFLT_ }; _NO_DEFLT_ }; _NO_DEFLT_ } _SPECIALISE_ [ Int ] 1 { _A_ 2 _U_ 11 _N_ _S_ "U(U(U(P)U(P))P)U(P)" {_A_ 4 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
indexCharOffAddr :: _Addr -> Int -> Char
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 2 XX 3 \ (u0 :: Addr#) (u1 :: Int#) -> case _#_ indexCharOffAddr# [] [u0, u1] of { _PRIM_ (u2 :: Char#) -> _!_ C# [] [u2] } _N_} _F_ _IF_ARGS_ 0 2 CC 5 \ (u0 :: _Addr) (u1 :: Int) -> case u0 of { _ALG_ A# (u2 :: Addr#) -> case u1 of { _ALG_ I# (u3 :: Int#) -> case _#_ indexCharOffAddr# [] [u2, u3] of { _PRIM_ (u4 :: Char#) -> _!_ C# [] [u4] }; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ #-}
indexDoubleArray :: Ix a => _ByteArray a -> a -> Double
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "U(AASA)U(LP)L" {_A_ 4 _U_ 1222 _N_ _N_ _F_ _IF_ARGS_ 1 4 XXXX 7 _/\_ u0 -> \ (u1 :: (u0, u0) -> u0 -> Int) (u2 :: (u0, u0)) (u3 :: ByteArray#) (u4 :: u0) -> case _APP_  u1 [ u2, u4 ] of { _ALG_ I# (u5 :: Int#) -> case _#_ indexDoubleArray# [] [u3, u5] of { _PRIM_ (u6 :: Double#) -> _!_ D# [] [u6] }; _NO_DEFLT_ } _N_} _F_ _ALWAYS_ _/\_ u0 -> \ (u1 :: {{Ix u0}}) (u2 :: _ByteArray u0) (u3 :: u0) -> case u1 of { _ALG_ _TUP_4 (u4 :: {{Ord u0}}) (u5 :: (u0, u0) -> [u0]) (u6 :: (u0, u0) -> u0 -> Int) (u7 :: (u0, u0) -> u0 -> Bool) -> case u2 of { _ALG_ _ByteArray (u8 :: (u0, u0)) (u9 :: ByteArray#) -> case _APP_  u6 [ u8, u3 ] of { _ALG_ I# (ua :: Int#) -> case _#_ indexDoubleArray# [] [u9, ua] of { _PRIM_ (ub :: Double#) -> _!_ D# [] [ub] }; _NO_DEFLT_ }; _NO_DEFLT_ }; _NO_DEFLT_ } _SPECIALISE_ [ Int ] 1 { _A_ 2 _U_ 11 _N_ _S_ "U(U(U(P)U(P))P)U(P)" {_A_ 4 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
indexDoubleOffAddr :: _Addr -> Int -> Double
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 2 XX 3 \ (u0 :: Addr#) (u1 :: Int#) -> case _#_ indexDoubleOffAddr# [] [u0, u1] of { _PRIM_ (u2 :: Double#) -> _!_ D# [] [u2] } _N_} _F_ _IF_ARGS_ 0 2 CC 5 \ (u0 :: _Addr) (u1 :: Int) -> case u0 of { _ALG_ A# (u2 :: Addr#) -> case u1 of { _ALG_ I# (u3 :: Int#) -> case _#_ indexDoubleOffAddr# [] [u2, u3] of { _PRIM_ (u4 :: Double#) -> _!_ D# [] [u4] }; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ #-}
indexFloatArray :: Ix a => _ByteArray a -> a -> Float
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "U(AASA)U(LP)L" {_A_ 4 _U_ 1222 _N_ _N_ _F_ _IF_ARGS_ 1 4 XXXX 7 _/\_ u0 -> \ (u1 :: (u0, u0) -> u0 -> Int) (u2 :: (u0, u0)) (u3 :: ByteArray#) (u4 :: u0) -> case _APP_  u1 [ u2, u4 ] of { _ALG_ I# (u5 :: Int#) -> case _#_ indexFloatArray# [] [u3, u5] of { _PRIM_ (u6 :: Float#) -> _!_ F# [] [u6] }; _NO_DEFLT_ } _N_} _F_ _ALWAYS_ _/\_ u0 -> \ (u1 :: {{Ix u0}}) (u2 :: _ByteArray u0) (u3 :: u0) -> case u1 of { _ALG_ _TUP_4 (u4 :: {{Ord u0}}) (u5 :: (u0, u0) -> [u0]) (u6 :: (u0, u0) -> u0 -> Int) (u7 :: (u0, u0) -> u0 -> Bool) -> case u2 of { _ALG_ _ByteArray (u8 :: (u0, u0)) (u9 :: ByteArray#) -> case _APP_  u6 [ u8, u3 ] of { _ALG_ I# (ua :: Int#) -> case _#_ indexFloatArray# [] [u9, ua] of { _PRIM_ (ub :: Float#) -> _!_ F# [] [ub] }; _NO_DEFLT_ }; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ #-}
indexFloatOffAddr :: _Addr -> Int -> Float
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 2 XX 3 \ (u0 :: Addr#) (u1 :: Int#) -> case _#_ indexFloatOffAddr# [] [u0, u1] of { _PRIM_ (u2 :: Float#) -> _!_ F# [] [u2] } _N_} _F_ _IF_ARGS_ 0 2 CC 5 \ (u0 :: _Addr) (u1 :: Int) -> case u0 of { _ALG_ A# (u2 :: Addr#) -> case u1 of { _ALG_ I# (u3 :: Int#) -> case _#_ indexFloatOffAddr# [] [u2, u3] of { _PRIM_ (u4 :: Float#) -> _!_ F# [] [u4] }; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ #-}
indexIntArray :: Ix a => _ByteArray a -> a -> Int
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "U(AASA)U(LP)L" {_A_ 4 _U_ 1222 _N_ _N_ _F_ _IF_ARGS_ 1 4 XXXX 7 _/\_ u0 -> \ (u1 :: (u0, u0) -> u0 -> Int) (u2 :: (u0, u0)) (u3 :: ByteArray#) (u4 :: u0) -> case _APP_  u1 [ u2, u4 ] of { _ALG_ I# (u5 :: Int#) -> case _#_ indexIntArray# [] [u3, u5] of { _PRIM_ (u6 :: Int#) -> _!_ I# [] [u6] }; _NO_DEFLT_ } _N_} _F_ _ALWAYS_ _/\_ u0 -> \ (u1 :: {{Ix u0}}) (u2 :: _ByteArray u0) (u3 :: u0) -> case u1 of { _ALG_ _TUP_4 (u4 :: {{Ord u0}}) (u5 :: (u0, u0) -> [u0]) (u6 :: (u0, u0) -> u0 -> Int) (u7 :: (u0, u0) -> u0 -> Bool) -> case u2 of { _ALG_ _ByteArray (u8 :: (u0, u0)) (u9 :: ByteArray#) -> case _APP_  u6 [ u8, u3 ] of { _ALG_ I# (ua :: Int#) -> case _#_ indexIntArray# [] [u9, ua] of { _PRIM_ (ub :: Int#) -> _!_ I# [] [ub] }; _NO_DEFLT_ }; _NO_DEFLT_ }; _NO_DEFLT_ } _SPECIALISE_ [ Int ] 1 { _A_ 2 _U_ 11 _N_ _S_ "U(U(U(P)U(P))P)U(P)" {_A_ 4 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
indexIntOffAddr :: _Addr -> Int -> Int
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 2 XX 3 \ (u0 :: Addr#) (u1 :: Int#) -> case _#_ indexIntOffAddr# [] [u0, u1] of { _PRIM_ (u2 :: Int#) -> _!_ I# [] [u2] } _N_} _F_ _IF_ARGS_ 0 2 CC 5 \ (u0 :: _Addr) (u1 :: Int) -> case u0 of { _ALG_ A# (u2 :: Addr#) -> case u1 of { _ALG_ I# (u3 :: Int#) -> case _#_ indexIntOffAddr# [] [u2, u3] of { _PRIM_ (u4 :: Int#) -> _!_ I# [] [u4] }; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ #-}
listPrimIO :: [_State _RealWorld -> (a, _State _RealWorld)] -> _State _RealWorld -> ([a], _State _RealWorld)
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "SL" _N_ _N_ #-}
listST :: [_State a -> (b, _State a)] -> _State a -> ([b], _State a)
	{-# GHC_PRAGMA _A_ 1 _U_ 12 _N_ _S_ "S" _N_ _N_ #-}
mapAndUnzipPrimIO :: (a -> _State _RealWorld -> ((b, c), _State _RealWorld)) -> [a] -> _State _RealWorld -> (([b], [c]), _State _RealWorld)
	{-# GHC_PRAGMA _A_ 3 _U_ 212 _N_ _S_ "LSL" _N_ _N_ #-}
mapAndUnzipST :: (a -> _State b -> ((c, d), _State b)) -> [a] -> _State b -> (([c], [d]), _State b)
	{-# GHC_PRAGMA _A_ 2 _U_ 212 _N_ _S_ "LS" _N_ _N_ #-}
mapPrimIO :: (a -> _State _RealWorld -> (b, _State _RealWorld)) -> [a] -> _State _RealWorld -> ([b], _State _RealWorld)
	{-# GHC_PRAGMA _A_ 3 _U_ 212 _N_ _S_ "LSL" _N_ _N_ #-}
mapST :: (a -> _State b -> (c, _State b)) -> [a] -> _State b -> ([c], _State b)
	{-# GHC_PRAGMA _A_ 2 _U_ 212 _N_ _S_ "LS" _N_ _N_ #-}
newAddrArray :: Ix b => (b, b) -> _State a -> (_MutableByteArray a b, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _S_ "U(ASLA)U(LL)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ _N_, Int ] 1 { _A_ 2 _U_ 11 _N_ _S_ "U(U(P)U(P))U(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
newArray :: Ix b => (b, b) -> c -> _State a -> (_MutableArray a b c, _State a)
	{-# GHC_PRAGMA _A_ 4 _U_ 1221 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludeGlaST _newArray _N_ #-}
newCharArray :: Ix b => (b, b) -> _State a -> (_MutableByteArray a b, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _S_ "U(ASLA)U(LL)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ _N_, Int ] 1 { _A_ 2 _U_ 11 _N_ _S_ "U(U(P)U(P))U(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
newDoubleArray :: Ix b => (b, b) -> _State a -> (_MutableByteArray a b, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _S_ "U(ASLA)U(LL)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ _N_, Int ] 1 { _A_ 2 _U_ 11 _N_ _S_ "U(U(P)U(P))U(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
newFloatArray :: Ix b => (b, b) -> _State a -> (_MutableByteArray a b, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _S_ "U(ASLA)U(LL)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ _N_, Int ] 1 { _A_ 2 _U_ 11 _N_ _S_ "U(U(P)U(P))U(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
newIntArray :: Ix b => (b, b) -> _State a -> (_MutableByteArray a b, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _S_ "U(ASLA)U(LL)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ _N_, Int ] 1 { _A_ 2 _U_ 11 _N_ _S_ "U(U(P)U(P))U(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
newVar :: b -> _State a -> (_MutableArray a Int b, _State a)
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LU(P)" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
readAddrArray :: Ix a => _MutableByteArray b a -> a -> _State b -> (_Addr, _State b)
	{-# GHC_PRAGMA _A_ 4 _U_ 1121 _N_ _S_ "U(AASA)U(LP)LU(P)" {_A_ 5 _U_ 12222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ Int, _N_ ] 1 { _A_ 3 _U_ 111 _N_ _S_ "U(U(U(P)U(P))P)U(P)U(P)" {_A_ 5 _U_ 22222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
readArray :: Ix a => _MutableArray b a c -> a -> _State b -> (c, _State b)
	{-# GHC_PRAGMA _A_ 4 _U_ 1121 _N_ _S_ "U(AASA)U(LP)LU(P)" {_A_ 5 _U_ 12222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ Int, _N_, _N_ ] 1 { _A_ 3 _U_ 111 _N_ _S_ "U(U(U(P)U(P))P)U(P)U(P)" {_A_ 5 _U_ 22222 _N_ _N_ _N_ _N_} _N_ _N_ }, [ (Int, Int), _N_, _N_ ] 1 { _A_ 3 _U_ 111 _N_ _S_ "U(U(SS)P)U(U(P)U(P))U(P)" {_A_ 5 _U_ 11212 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
readChanPrimIO :: [Char] -> _State _RealWorld -> ([Char], _State _RealWorld)
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _N_ _N_ #-}
readCharArray :: Ix a => _MutableByteArray b a -> a -> _State b -> (Char, _State b)
	{-# GHC_PRAGMA _A_ 4 _U_ 1121 _N_ _S_ "U(AASA)U(LP)LU(P)" {_A_ 5 _U_ 12222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ Int, _N_ ] 1 { _A_ 3 _U_ 111 _N_ _S_ "U(U(U(P)U(P))P)U(P)U(P)" {_A_ 5 _U_ 22222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
readDoubleArray :: Ix a => _MutableByteArray b a -> a -> _State b -> (Double, _State b)
	{-# GHC_PRAGMA _A_ 4 _U_ 1121 _N_ _S_ "U(AASA)U(LP)LU(P)" {_A_ 5 _U_ 12222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ Int, _N_ ] 1 { _A_ 3 _U_ 111 _N_ _S_ "U(U(U(P)U(P))P)U(P)U(P)" {_A_ 5 _U_ 22222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
readFloatArray :: Ix a => _MutableByteArray b a -> a -> _State b -> (Float, _State b)
	{-# GHC_PRAGMA _A_ 4 _U_ 1121 _N_ _S_ "U(AASA)U(LP)LU(P)" {_A_ 5 _U_ 12222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
readIntArray :: Ix a => _MutableByteArray b a -> a -> _State b -> (Int, _State b)
	{-# GHC_PRAGMA _A_ 4 _U_ 1121 _N_ _S_ "U(AASA)U(LP)LU(P)" {_A_ 5 _U_ 12222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ Int, _N_ ] 1 { _A_ 3 _U_ 111 _N_ _S_ "U(U(U(P)U(P))P)U(P)U(P)" {_A_ 5 _U_ 22222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
readVar :: _MutableArray a Int b -> _State a -> (b, _State a)
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(AP)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
returnPrimIO :: a -> _State _RealWorld -> (a, _State _RealWorld)
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "LS" _F_ _ALWAYS_ _/\_ u0 -> \ (u1 :: u0) (u2 :: _State _RealWorld) -> case u2 of { _ALG_ S# (u3 :: State# _RealWorld) -> _!_ _TUP_2 [u0, (_State _RealWorld)] [u1, u2]; _NO_DEFLT_ } _N_ #-}
returnST :: b -> _State a -> (b, _State a)
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _F_ _ALWAYS_ _/\_ u0 u1 -> \ (u2 :: u1) (u3 :: _State u0) -> _!_ _TUP_2 [u1, (_State u0)] [u2, u3] _N_ #-}
returnStrictlyST :: b -> _State a -> (b, _State a)
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "LS" _F_ _ALWAYS_ _/\_ u0 u1 -> \ (u2 :: u1) (u3 :: _State u0) -> case u3 of { _ALG_ S# (u4 :: State# u0) -> _!_ _TUP_2 [u1, (_State u0)] [u2, u3]; _NO_DEFLT_ } _N_ #-}
sameMutableArray :: _MutableArray a b c -> _MutableArray a b c -> Bool
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(AP)U(AP)" {_A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 3 2 XX 1 _/\_ u0 u1 u2 -> \ (u3 :: MutableArray# u0 u2) (u4 :: MutableArray# u0 u2) -> _#_ sameMutableArray# [u0, u2] [u3, u4] _N_} _F_ _IF_ARGS_ 3 2 CC 3 _/\_ u0 u1 u2 -> \ (u3 :: _MutableArray u0 u1 u2) (u4 :: _MutableArray u0 u1 u2) -> case u3 of { _ALG_ _MutableArray (u5 :: (u1, u1)) (u6 :: MutableArray# u0 u2) -> case u4 of { _ALG_ _MutableArray (u7 :: (u1, u1)) (u8 :: MutableArray# u0 u2) -> _#_ sameMutableArray# [u0, u2] [u6, u8]; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ #-}
sameMutableByteArray :: _MutableByteArray a b -> _MutableByteArray a b -> Bool
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(AP)U(AP)" {_A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 2 2 XX 1 _/\_ u0 u1 -> \ (u2 :: MutableByteArray# u0) (u3 :: MutableByteArray# u0) -> _#_ sameMutableByteArray# [u0] [u2, u3] _N_} _F_ _IF_ARGS_ 2 2 CC 3 _/\_ u0 u1 -> \ (u2 :: _MutableByteArray u0 u1) (u3 :: _MutableByteArray u0 u1) -> case u2 of { _ALG_ _MutableByteArray (u4 :: (u1, u1)) (u5 :: MutableByteArray# u0) -> case u3 of { _ALG_ _MutableByteArray (u6 :: (u1, u1)) (u7 :: MutableByteArray# u0) -> _#_ sameMutableByteArray# [u0] [u5, u7]; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ #-}
sameVar :: _MutableArray a Int b -> _MutableArray a Int b -> Bool
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(AP)U(AP)" {_A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 2 2 XX 1 _/\_ u0 u1 -> \ (u2 :: MutableArray# u0 u1) (u3 :: MutableArray# u0 u1) -> _#_ sameMutableArray# [u0, u1] [u2, u3] _N_} _F_ _IF_ARGS_ 2 2 CC 3 _/\_ u0 u1 -> \ (u2 :: _MutableArray u0 Int u1) (u3 :: _MutableArray u0 Int u1) -> case u2 of { _ALG_ _MutableArray (u4 :: (Int, Int)) (u5 :: MutableArray# u0 u1) -> case u3 of { _ALG_ _MutableArray (u6 :: (Int, Int)) (u7 :: MutableArray# u0 u1) -> _#_ sameMutableArray# [u0, u1] [u5, u7]; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ #-}
seqPrimIO :: (_State _RealWorld -> (a, _State _RealWorld)) -> (_State _RealWorld -> (b, _State _RealWorld)) -> _State _RealWorld -> (b, _State _RealWorld)
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "SSL" _F_ _ALWAYS_ _/\_ u0 u1 -> \ (u2 :: _State _RealWorld -> (u0, _State _RealWorld)) (u3 :: _State _RealWorld -> (u1, _State _RealWorld)) (u4 :: _State _RealWorld) -> case _APP_  u2 [ u4 ] of { _ALG_ _TUP_2 (u5 :: u0) (u6 :: _State _RealWorld) -> _APP_  u3 [ u6 ]; _NO_DEFLT_ } _N_ #-}
seqST :: (_State b -> (a, _State b)) -> (_State b -> (c, _State b)) -> _State b -> (c, _State b)
	{-# GHC_PRAGMA _A_ 2 _U_ 112 _N_ _S_ "LS" _N_ _N_ #-}
seqStrictlyST :: (_State b -> (a, _State b)) -> (_State b -> (c, _State b)) -> _State b -> (c, _State b)
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "SSL" _F_ _ALWAYS_ _/\_ u0 u1 u2 -> \ (u3 :: _State u1 -> (u0, _State u1)) (u4 :: _State u1 -> (u2, _State u1)) (u5 :: _State u1) -> case _APP_  u3 [ u5 ] of { _ALG_ _TUP_2 (u6 :: u0) (u7 :: _State u1) -> _APP_  u4 [ u7 ]; _NO_DEFLT_ } _N_ #-}
thawArray :: Ix a => Array a b -> _State c -> (_MutableArray c a b, _State c)
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _N_ _N_ _SPECIALISE_ [ Int, _N_, _N_ ] 1 { _A_ 2 _U_ 11 _N_ _N_ _N_ _N_ }, [ (Int, Int), _N_, _N_ ] 1 { _A_ 2 _U_ 11 _N_ _N_ _N_ _N_ } #-}
thenPrimIO :: (_State _RealWorld -> (a, _State _RealWorld)) -> (a -> _State _RealWorld -> (b, _State _RealWorld)) -> _State _RealWorld -> (b, _State _RealWorld)
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "SSL" _F_ _ALWAYS_ _/\_ u0 u1 -> \ (u2 :: _State _RealWorld -> (u0, _State _RealWorld)) (u3 :: u0 -> _State _RealWorld -> (u1, _State _RealWorld)) (u4 :: _State _RealWorld) -> case _APP_  u2 [ u4 ] of { _ALG_ _TUP_2 (u5 :: u0) (u6 :: _State _RealWorld) -> _APP_  u3 [ u5, u6 ]; _NO_DEFLT_ } _N_ #-}
thenST :: (_State b -> (a, _State b)) -> (a -> _State b -> (c, _State b)) -> _State b -> (c, _State b)
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "LSL" _N_ _N_ #-}
thenStrictlyST :: (_State b -> (a, _State b)) -> (a -> _State b -> (c, _State b)) -> _State b -> (c, _State b)
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "SSL" _F_ _ALWAYS_ _/\_ u0 u1 u2 -> \ (u3 :: _State u1 -> (u0, _State u1)) (u4 :: u0 -> _State u1 -> (u2, _State u1)) (u5 :: _State u1) -> case _APP_  u3 [ u5 ] of { _ALG_ _TUP_2 (u6 :: u0) (u7 :: _State u1) -> _APP_  u4 [ u6, u7 ]; _NO_DEFLT_ } _N_ #-}
unsafeFreezeArray :: Ix b => _MutableArray a b c -> _State a -> (Array b c, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 011 _N_ _S_ "AU(LP)U(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
unsafeFreezeByteArray :: Ix b => _MutableByteArray a b -> _State a -> (_ByteArray b, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 011 _N_ _S_ "AU(LP)U(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ _N_, Int ] 1 { _A_ 2 _U_ 11 _N_ _S_ "U(LP)U(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
unsafeInterleavePrimIO :: (_State _RealWorld -> (a, _State _RealWorld)) -> _State _RealWorld -> (a, _State _RealWorld)
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _N_ _N_ _N_ #-}
unsafeInterleaveST :: (_State a -> (b, _State a)) -> _State a -> (b, _State a)
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _N_ _N_ _N_ #-}
unsafePerformPrimIO :: (_State _RealWorld -> (a, _State _RealWorld)) -> a
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
fclose :: _FILE -> _State _RealWorld -> (Int, _State _RealWorld)
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
fdopen :: Int -> [Char] -> _State _RealWorld -> (_FILE, _State _RealWorld)
	{-# GHC_PRAGMA _A_ 3 _U_ 121 _N_ _S_ "U(P)LU(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
fflush :: _FILE -> _State _RealWorld -> (Int, _State _RealWorld)
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
fopen :: [Char] -> [Char] -> _State _RealWorld -> (_FILE, _State _RealWorld)
	{-# GHC_PRAGMA _A_ 3 _U_ 221 _N_ _S_ "LLU(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
fread :: Int -> Int -> _FILE -> _State _RealWorld -> ((Int, _ByteArray Int), _State _RealWorld)
	{-# GHC_PRAGMA _A_ 4 _U_ 1111 _N_ _S_ "U(P)U(P)U(P)U(P)" {_A_ 4 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
freopen :: [Char] -> [Char] -> _FILE -> _State _RealWorld -> (_FILE, _State _RealWorld)
	{-# GHC_PRAGMA _A_ 4 _U_ 2211 _N_ _S_ "LLU(P)U(P)" {_A_ 4 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
fwrite :: _ByteArray Int -> Int -> Int -> _FILE -> _State _RealWorld -> (Int, _State _RealWorld)
	{-# GHC_PRAGMA _A_ 5 _U_ 11111 _N_ _S_ "U(AP)U(P)U(P)U(P)U(P)" {_A_ 5 _U_ 22222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
writeAddrArray :: Ix a => _MutableByteArray b a -> a -> _Addr -> _State b -> ((), _State b)
	{-# GHC_PRAGMA _A_ 5 _U_ 11211 _N_ _S_ "U(AASA)U(LP)LU(P)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ Int, _N_ ] 1 { _A_ 4 _U_ 1111 _N_ _S_ "U(U(U(P)U(P))P)U(P)U(P)U(P)" {_A_ 5 _U_ 12222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
writeArray :: Ix a => _MutableArray c a b -> a -> b -> _State c -> ((), _State c)
	{-# GHC_PRAGMA _A_ 5 _U_ 11221 _N_ _S_ "U(AASA)U(LP)LLU(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ Int, _N_, _N_ ] 1 { _A_ 4 _U_ 1121 _N_ _S_ "U(U(U(P)U(P))P)U(P)LU(P)" {_A_ 5 _U_ 12222 _N_ _N_ _N_ _N_} _N_ _N_ }, [ (Int, Int), _N_, _N_ ] 1 { _A_ 4 _U_ 1121 _N_ _S_ "U(U(SS)P)U(U(P)U(P))LU(P)" {_A_ 5 _U_ 12122 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
writeCharArray :: Ix a => _MutableByteArray b a -> a -> Char -> _State b -> ((), _State b)
	{-# GHC_PRAGMA _A_ 5 _U_ 11211 _N_ _S_ "U(AASA)U(LP)LU(P)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ Int, _N_ ] 1 { _A_ 4 _U_ 1111 _N_ _S_ "U(U(U(P)U(P))P)U(P)U(P)U(P)" {_A_ 5 _U_ 12222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
writeDoubleArray :: Ix a => _MutableByteArray b a -> a -> Double -> _State b -> ((), _State b)
	{-# GHC_PRAGMA _A_ 5 _U_ 11211 _N_ _S_ "U(AASA)U(LP)LU(P)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ Int, _N_ ] 1 { _A_ 4 _U_ 1111 _N_ _S_ "U(U(U(P)U(P))P)U(P)U(P)U(P)" {_A_ 5 _U_ 12222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
writeFloatArray :: Ix a => _MutableByteArray b a -> a -> Float -> _State b -> ((), _State b)
	{-# GHC_PRAGMA _A_ 5 _U_ 11211 _N_ _S_ "U(AASA)U(LP)LU(P)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
writeIntArray :: Ix a => _MutableByteArray b a -> a -> Int -> _State b -> ((), _State b)
	{-# GHC_PRAGMA _A_ 5 _U_ 11211 _N_ _S_ "U(AASA)U(LP)LU(P)U(P)" {_A_ 5 _U_ 11222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ Int, _N_ ] 1 { _A_ 4 _U_ 1111 _N_ _S_ "U(U(U(P)U(P))P)U(P)U(P)U(P)" {_A_ 5 _U_ 12222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
writeVar :: _MutableArray b Int a -> a -> _State b -> ((), _State b)
	{-# GHC_PRAGMA _A_ 3 _U_ 121 _N_ _S_ "U(AP)LU(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
instance Eq _FILE
	{-# GHC_PRAGMA _M_ Stdio {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(_FILE -> _FILE -> Bool), (_FILE -> _FILE -> Bool)] [_CONSTM_ Eq (==) (_FILE), _CONSTM_ Eq (/=) (_FILE)] _N_
	 (==) = { _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 2 XX 1 \ (u0 :: Addr#) (u1 :: Addr#) -> _#_ eqAddr# [] [u0, u1] _N_} _F_ _IF_ARGS_ 0 2 CC 3 \ (u0 :: _FILE) (u1 :: _FILE) -> case u0 of { _ALG_ _ORIG_ Stdio _FILE (u2 :: Addr#) -> case u1 of { _ALG_ _ORIG_ Stdio _FILE (u3 :: Addr#) -> _#_ eqAddr# [] [u2, u3]; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ },
	 (/=) = { _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 2 XX 5 \ (u0 :: Addr#) (u1 :: Addr#) -> case _#_ eqAddr# [] [u0, u1] of { _ALG_ True  -> _!_ False [] []; False  -> _!_ True [] []; _NO_DEFLT_ } _N_} _F_ _IF_ARGS_ 0 2 CC 7 \ (u0 :: _FILE) (u1 :: _FILE) -> case u0 of { _ALG_ _ORIG_ Stdio _FILE (u2 :: Addr#) -> case u1 of { _ALG_ _ORIG_ Stdio _FILE (u3 :: Addr#) -> case _#_ eqAddr# [] [u2, u3] of { _ALG_ True  -> _!_ False [] []; False  -> _!_ True [] []; _NO_DEFLT_ }; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ } #-}
instance _CCallable _FILE
	{-# GHC_PRAGMA _M_ Stdio {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _!_ _TUP_0 [] [] _N_ #-}
instance _CCallable (_ByteArray a)
	{-# GHC_PRAGMA _M_ PreludeArray {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 1 0 X 1 _/\_ u0 -> _!_ _TUP_0 [] [] _N_ #-}
instance _CCallable (_MutableByteArray a b)
	{-# GHC_PRAGMA _M_ PreludeGlaST {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 2 0 X 1 _/\_ u0 u1 -> _!_ _TUP_0 [] [] _N_ #-}
instance _CReturnable _FILE
	{-# GHC_PRAGMA _M_ Stdio {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _!_ _TUP_0 [] [] _N_ #-}

