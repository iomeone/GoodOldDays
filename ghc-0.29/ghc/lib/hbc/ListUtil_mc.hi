{-# GHC_PRAGMA INTERFACE VERSION 6 #-}
interface ListUtil where
import PreludeStdIO(Maybe)
assoc :: Eq b => (a -> c) -> c -> [(b, a)] -> b -> c
	{-# GHC_PRAGMA _A_ 1 _U_ 12212 _N_ _N_ _N_ _N_ #-}
assocDef :: Eq a => [(a, b)] -> b -> a -> b
	{-# GHC_PRAGMA _A_ 1 _U_ 1122 _N_ _N_ _N_ _N_ #-}
chopList :: ([a] -> (b, [a])) -> [a] -> [b]
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _N_ _N_ #-}
concatMap :: (a -> [b]) -> [a] -> [b]
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LS" _N_ _N_ #-}
elemEq :: (a -> a -> Bool) -> a -> [a] -> Bool
	{-# GHC_PRAGMA _A_ 3 _U_ 221 _N_ _S_ "LLS" _N_ _N_ #-}
group :: Eq a => [a] -> [[a]]
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _N_ _F_ _IF_ARGS_ 1 2 CX 6 _/\_ u0 -> \ (u1 :: {{Eq u0}}) (u2 :: [u0]) -> let {(u5 :: u0 -> u0 -> Bool) = case u1 of { _ALG_ _TUP_2 (u3 :: u0 -> u0 -> Bool) (u4 :: u0 -> u0 -> Bool) -> u3; _NO_DEFLT_ }} in _APP_  _TYAPP_  _ORIG_ ListUtil groupEq { u0 } [ u5, u2 ] _N_ #-}
groupEq :: (a -> a -> Bool) -> [a] -> [[a]]
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _N_ _N_ #-}
intersection :: Eq a => [a] -> [a] -> [a]
	{-# GHC_PRAGMA _A_ 1 _U_ 212 _N_ _N_ _N_ _N_ #-}
lookup :: Eq a => [(a, b)] -> a -> Maybe b
	{-# GHC_PRAGMA _A_ 1 _U_ 112 _N_ _N_ _N_ _N_ #-}
mapAccuml :: (b -> a -> (b, c)) -> b -> [a] -> (b, [c])
	{-# GHC_PRAGMA _A_ 3 _U_ 221 _N_ _S_ "LLS" _N_ _N_ #-}
nubEq :: (a -> a -> Bool) -> [a] -> [a]
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LS" _N_ _N_ #-}
readListLazily :: Text a => [Char] -> [a]
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "U(SLLL)S" {_A_ 5 _U_ 20002 _N_ _N_ _N_ _N_} _N_ _N_ #-}
rept :: Integral a => a -> b -> [b]
	{-# GHC_PRAGMA _A_ 3 _U_ 122 _N_ _N_ _N_ _N_ #-}
tails :: [a] -> [[a]]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
unfoldr :: (a -> (b, a)) -> (a -> Bool) -> a -> [b]
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _S_ "LSL" _N_ _N_ #-}
union :: Eq a => [a] -> [a] -> [a]
	{-# GHC_PRAGMA _A_ 3 _U_ 122 _N_ _S_ "LSL" _N_ _N_ #-}

