{-# GHC_PRAGMA INTERFACE VERSION 6 #-}
interface Parse where
import PreludeMonadicIO(Either)
import PreludeStdIO(Maybe)
infixr 8 +.+
infixr 8 +..
infixr 8 ..+
infixr 4 |!!
infixr 4 ||!
infixr 4 |||
infix  6 .>
infix  6 >>>
infix  6 `act`
infix  6 `into`
data ParseResult a b 
type Parser a b = a -> Int -> ParseResult a b
(+.+) :: (a -> Int -> ParseResult a b) -> (a -> Int -> ParseResult a c) -> a -> Int -> ParseResult a (b, c)
	{-# GHC_PRAGMA _A_ 4 _U_ 1222 _N_ _S_ "SLLL" _N_ _N_ #-}
(+..) :: (b -> Int -> ParseResult b c) -> (b -> Int -> ParseResult b a) -> b -> Int -> ParseResult b c
	{-# GHC_PRAGMA _A_ 4 _U_ 1222 _N_ _S_ "SLLL" _N_ _N_ #-}
(..+) :: (b -> Int -> ParseResult b a) -> (b -> Int -> ParseResult b c) -> b -> Int -> ParseResult b c
	{-# GHC_PRAGMA _A_ 4 _U_ 1222 _N_ _S_ "SLLL" _N_ _N_ #-}
(.>) :: (b -> Int -> ParseResult b a) -> c -> b -> Int -> ParseResult b c
	{-# GHC_PRAGMA _A_ 4 _U_ 1222 _N_ _S_ "SLLL" _N_ _N_ #-}
(>>>) :: (c -> Int -> ParseResult c (a, b)) -> (a -> b -> d) -> c -> Int -> ParseResult c d
	{-# GHC_PRAGMA _A_ 4 _U_ 1222 _N_ _S_ "SLLL" _N_ _N_ #-}
act :: (b -> Int -> ParseResult b a) -> (a -> c) -> b -> Int -> ParseResult b c
	{-# GHC_PRAGMA _A_ 4 _U_ 1222 _N_ _S_ "SLLL" _N_ _N_ #-}
count :: (a -> Int -> ParseResult a b) -> Int -> a -> Int -> ParseResult a [b]
	{-# GHC_PRAGMA _A_ 2 _U_ 2122 _N_ _S_ "LU(P)" {_A_ 2 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
failP :: [Char] -> a -> Int -> ParseResult a b
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _N_ _N_ _N_ #-}
into :: (b -> Int -> ParseResult b a) -> (a -> b -> Int -> ParseResult b c) -> b -> Int -> ParseResult b c
	{-# GHC_PRAGMA _A_ 4 _U_ 1222 _N_ _S_ "SLLL" _N_ _N_ #-}
lit :: (Eq a, Text a) => a -> [a] -> Int -> ParseResult [a] a
	{-# GHC_PRAGMA _A_ 2 _U_ 11222 _N_ _N_ _N_ _N_ #-}
litp :: [Char] -> (a -> Bool) -> [a] -> Int -> ParseResult [a] a
	{-# GHC_PRAGMA _A_ 4 _U_ 2122 _N_ _S_ "LLSL" _N_ _N_ #-}
many :: (a -> Int -> ParseResult a b) -> a -> Int -> ParseResult a [b]
	{-# GHC_PRAGMA _A_ 1 _U_ 222 _N_ _S_ "S" _N_ _N_ #-}
many1 :: (a -> Int -> ParseResult a b) -> a -> Int -> ParseResult a [b]
	{-# GHC_PRAGMA _A_ 1 _U_ 222 _N_ _S_ "S" _N_ _N_ #-}
parse :: (b -> Int -> ParseResult b a) -> b -> Either ([[Char]], b) [(a, b)]
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "SL" _N_ _N_ #-}
recover :: (a -> Int -> ParseResult a b) -> ([[Char]] -> a -> Maybe (a, b)) -> a -> Int -> ParseResult a b
	{-# GHC_PRAGMA _A_ 4 _U_ 1122 _N_ _S_ "SLLL" _N_ _N_ #-}
sParse :: Text a => ([a] -> Int -> ParseResult [a] b) -> [a] -> Either [Char] b
	{-# GHC_PRAGMA _A_ 1 _U_ 212 _N_ _N_ _N_ _N_ #-}
sepBy :: (b -> Int -> ParseResult b c) -> (b -> Int -> ParseResult b a) -> b -> Int -> ParseResult b [c]
	{-# GHC_PRAGMA _A_ 2 _U_ 2222 _N_ _S_ "SL" _N_ _N_ #-}
sepBy1 :: (b -> Int -> ParseResult b c) -> (b -> Int -> ParseResult b a) -> b -> Int -> ParseResult b [c]
	{-# GHC_PRAGMA _A_ 2 _U_ 2222 _N_ _S_ "SL" _N_ _N_ #-}
simpleParse :: Text a => ([a] -> Int -> ParseResult [a] b) -> [a] -> b
	{-# GHC_PRAGMA _A_ 1 _U_ 212 _N_ _N_ _N_ _N_ #-}
succeed :: b -> a -> Int -> ParseResult a b
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _N_ _N_ _N_ #-}
testp :: [Char] -> (b -> Bool) -> (a -> Int -> ParseResult a b) -> a -> Int -> ParseResult a b
	{-# GHC_PRAGMA _A_ 5 _U_ 22122 _N_ _S_ "LLSLL" _N_ _N_ #-}
token :: (a -> Either [Char] (b, a)) -> a -> Int -> ParseResult a b
	{-# GHC_PRAGMA _A_ 3 _U_ 122 _N_ _N_ _N_ _N_ #-}
(|!!) :: (a -> Int -> ParseResult a b) -> (a -> Int -> ParseResult a b) -> a -> Int -> ParseResult a b
	{-# GHC_PRAGMA _A_ 2 _U_ 1122 _N_ _S_ "SL" _N_ _N_ #-}
(||!) :: (a -> Int -> ParseResult a b) -> (a -> Int -> ParseResult a b) -> a -> Int -> ParseResult a b
	{-# GHC_PRAGMA _A_ 4 _U_ 1122 _N_ _S_ "SLLL" _N_ _N_ #-}
(|||) :: (a -> Int -> ParseResult a b) -> (a -> Int -> ParseResult a b) -> a -> Int -> ParseResult a b
	{-# GHC_PRAGMA _A_ 4 _U_ 1122 _N_ _S_ "SLLL" _N_ _N_ #-}
instance (Text a, Text b) => Text (ParseResult a b)
	{-# GHC_PRAGMA _M_ Parse {-dfun-} _A_ 2 _U_ 22 _N_ _N_ _N_ _N_ #-}

