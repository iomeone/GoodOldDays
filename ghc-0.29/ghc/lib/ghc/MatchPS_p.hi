{-# GHC_PRAGMA INTERFACE VERSION 6 #-}
interface MatchPS where
import PreludeArray(Array)
import PreludePS(_PackedString)
import PreludeStdIO(Maybe)
import Regex(REmatch(..))
data REmatch   = REmatch (Array Int (Int, Int)) (Int, Int) (Int, Int) (Int, Int) (Int, Int)
chopPS :: _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
findPS :: _PackedString -> _PackedString -> Maybe Int
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "LS" _N_ _N_ #-}
getAfterMatch :: REmatch -> _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "U(AAAU(U(P)U(P))A)L" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
getLastMatch :: REmatch -> _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "U(AAAAU(U(P)U(P)))L" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
getMatchedGroup :: REmatch -> Int -> _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "U(U(U(U(P)U(P))P)AAAA)U(P)L" {_A_ 5 _U_ 22222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
getMatchesNo :: REmatch -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(U(U(AU(P))P)AAAA)" {_A_ 2 _U_ 20 _N_ _N_ _F_ _IF_ARGS_ 0 2 XX 2 \ (u0 :: Int#) (u1 :: Array# (Int, Int)) -> _!_ I# [] [u0] _N_} _F_ _IF_ARGS_ 0 1 C 4 \ (u0 :: REmatch) -> case u0 of { _ALG_ _ORIG_ Regex REmatch (u1 :: Array Int (Int, Int)) (u2 :: (Int, Int)) (u3 :: (Int, Int)) (u4 :: (Int, Int)) (u5 :: (Int, Int)) -> case u1 of { _ALG_ _Array (u6 :: (Int, Int)) (u7 :: Array# (Int, Int)) -> case u6 of { _ALG_ _TUP_2 (u8 :: Int) (u9 :: Int) -> u9; _NO_DEFLT_ }; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ #-}
getWholeMatch :: REmatch -> _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "U(AAU(U(P)U(P))AA)L" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
match2PS :: _PackedString -> _PackedString -> _PackedString -> [Char] -> Maybe REmatch
	{-# GHC_PRAGMA _A_ 4 _U_ 2222 _N_ _S_ "SSSS" _N_ _N_ #-}
matchPS :: _PackedString -> _PackedString -> [Char] -> Maybe REmatch
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _S_ "SSS" _N_ _N_ #-}
matchPrefixPS :: _PackedString -> _PackedString -> Int
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "SL" _N_ _N_ #-}
replacePS :: _PackedString -> _PackedString -> [Char] -> _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 4 _U_ 2222 _N_ _S_ "SLSS" _N_ _N_ #-}
rfindPS :: _PackedString -> _PackedString -> Maybe Int
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "LS" _N_ _N_ #-}
search2PS :: _PackedString -> _PackedString -> _PackedString -> [Char] -> Maybe REmatch
	{-# GHC_PRAGMA _A_ 4 _U_ 2222 _N_ _S_ "SSSS" _N_ _N_ #-}
searchPS :: _PackedString -> _PackedString -> [Char] -> Maybe REmatch
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _S_ "SSS" _N_ _N_ #-}
substPS :: _PackedString -> _PackedString -> [Char] -> _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 4 _U_ 2222 _N_ _S_ "SLSS" _N_ _N_ #-}

