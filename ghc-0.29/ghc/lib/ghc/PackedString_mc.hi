{-# GHC_PRAGMA INTERFACE VERSION 6 #-}
interface PackedString where
import PreludeArray(_ByteArray)
import PreludeIOError(IOError13)
import PreludeMonadicIO(Either)
import PreludePS(_PackedString)
import PreludePrimIO(_MVar)
import PreludeStdIO(_Handle)
import Stdio(_FILE)
type PackedString = _PackedString
data _PackedString 	{-# GHC_PRAGMA _PS ByteArray# Int# Bool | _CPS Addr# Int# #-}
data _MVar a 	{-# GHC_PRAGMA _MVar (SynchVar# _RealWorld a) #-}
data _FILE 	{-# GHC_PRAGMA _FILE Addr# #-}
appendPS :: _PackedString -> _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _appendPS _N_ #-}
breakPS :: (Char -> Bool) -> _PackedString -> (_PackedString, _PackedString)
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _breakPS _N_ #-}
byteArrayToPS :: _ByteArray Int -> _PackedString
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(U(U(P)U(P))P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
concatPS :: [_PackedString] -> _PackedString
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _concatPS _N_ #-}
consPS :: Char -> _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _consPS _N_ #-}
dropPS :: Int -> _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "U(P)S" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
dropWhilePS :: (Char -> Bool) -> _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _dropWhilePS _N_ #-}
explode :: _PackedString -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _unpackPS _N_ #-}
filterPS :: (Char -> Bool) -> _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _filterPS _N_ #-}
foldlPS :: (a -> Char -> a) -> a -> _PackedString -> a
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _foldlPS _N_ #-}
foldrPS :: (Char -> a -> a) -> a -> _PackedString -> a
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _foldrPS _N_ #-}
getPS :: _FILE -> Int -> _State _RealWorld -> (_PackedString, _State _RealWorld)
	{-# GHC_PRAGMA _A_ 3 _U_ 211 _N_ _S_ "LU(P)U(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
hPutPS :: _MVar _Handle -> _PackedString -> _State _RealWorld -> (Either IOError13 (), _State _RealWorld)
	{-# GHC_PRAGMA _A_ 3 _U_ 221 _N_ _S_ "LSU(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
headPS :: _PackedString -> Char
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _headPS _N_ #-}
implode :: [Char] -> _PackedString
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _packString _N_ #-}
indexPS :: _PackedString -> Int -> Char
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "SU(P)" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
lengthPS :: _PackedString -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _lengthPS _N_ #-}
linesPS :: _PackedString -> [_PackedString]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _linesPS _N_ #-}
mapPS :: (Char -> Char) -> _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _mapPS _N_ #-}
nilPS :: _PackedString
	{-# GHC_PRAGMA _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _CPS [] [""#, 0#] _N_ #-}
nullPS :: _PackedString -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _nullPS _N_ #-}
packBytesForC :: [Char] -> _ByteArray Int
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _packBytesForC _N_ #-}
packBytesForCST :: [Char] -> _State a -> (_ByteArray Int, _State a)
	{-# GHC_PRAGMA _A_ 1 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _packBytesForCST _N_ #-}
packCBytes :: Int -> _Addr -> _PackedString
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
packCBytesST :: Int -> _Addr -> _State a -> (_PackedString, _State a)
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "U(P)U(P)L" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
packCString :: _Addr -> _PackedString
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(P)" {_A_ 1 _U_ 2 _N_ _N_ _N_ _N_} _N_ _N_ #-}
packString :: [Char] -> _PackedString
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _packString _N_ #-}
packStringST :: [Char] -> _State a -> (_PackedString, _State a)
	{-# GHC_PRAGMA _A_ 1 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _packStringST _N_ #-}
psToByteArray :: _PackedString -> _ByteArray Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _psToByteArray _N_ #-}
putPS :: _FILE -> _PackedString -> _State _RealWorld -> ((), _State _RealWorld)
	{-# GHC_PRAGMA _A_ 3 _U_ 221 _N_ _S_ "LSU(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
reversePS :: _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _reversePS _N_ #-}
spanPS :: (Char -> Bool) -> _PackedString -> (_PackedString, _PackedString)
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _spanPS _N_ #-}
splitAtPS :: Int -> _PackedString -> (_PackedString, _PackedString)
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _splitAtPS _N_ #-}
substrPS :: _PackedString -> Int -> Int -> _PackedString
	{-# GHC_PRAGMA _A_ 3 _U_ 211 _N_ _S_ "SU(P)U(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
tailPS :: _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _tailPS _N_ #-}
takePS :: Int -> _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "U(P)L" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
takeWhilePS :: (Char -> Bool) -> _PackedString -> _PackedString
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _takeWhilePS _N_ #-}
unpackPS :: _PackedString -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _unpackPS _N_ #-}
wordsPS :: _PackedString -> [_PackedString]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludePS _wordsPS _N_ #-}

