{-# GHC_PRAGMA INTERFACE VERSION 6 #-}
interface LibPosixUtil where
import PreludeArray(_ByteArray)
import PreludeGlaST(_MutableByteArray)
import PreludeIOError(IOError13)
import PreludeMonadicIO(Either)
type ByteCount = Int
type Channel = Int
type ClockTick = Int
type EpochTime = Int
type FileOffset = Int
type GroupID = Int
type Limit = Int
type LinkCount = Int
type ProcessGroupID = Int
type ProcessID = Int
type UserID = Int
data _ByteArray a 	{-# GHC_PRAGMA _ByteArray (a, a) ByteArray# #-}
data _MutableByteArray a b 	{-# GHC_PRAGMA _MutableByteArray (b, b) (MutableByteArray# a) #-}
allocChars :: Int -> _State a -> (_MutableByteArray a (), _State a)
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
allocWords :: Int -> _State a -> (_MutableByteArray a (), _State a)
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
freeze :: _MutableByteArray a () -> _State a -> (_ByteArray (), _State a)
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(LP)U(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
strcpy :: _Addr -> _State _RealWorld -> ([Char], _State _RealWorld)
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
syserr :: [Char] -> _State _RealWorld -> (Either IOError13 a, _State _RealWorld)
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LU(P)" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
unvectorize :: _Addr -> Int -> _State _RealWorld -> ([[Char]], _State _RealWorld)
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _S_ "U(P)U(P)U(P)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
vectorize :: [[Char]] -> _State _RealWorld -> (_ByteArray (), _State _RealWorld)
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "SU(P)" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}

