{-# GHC_PRAGMA INTERFACE VERSION 6 #-}
interface PrimKind where
import Class(Class)
import Id(DataCon(..), Id, IdDetails)
import IdInfo(IdInfo)
import Maybes(Labda)
import NameTypes(FullName)
import Outputable(Outputable)
import TyCon(TyCon)
import TyVar(TyVar, TyVarTemplate)
import UniType(UniType)
import Unique(Unique)
type DataCon = Id
data Id 	{-# GHC_PRAGMA Id Unique UniType IdInfo IdDetails #-}
data PrimKind   = PtrKind | CodePtrKind | DataPtrKind | RetKind | InfoPtrKind | CostCentreKind | CharKind | IntKind | WordKind | AddrKind | FloatKind | DoubleKind | ForeignObjKind | StablePtrKind | ArrayKind | ByteArrayKind | VoidKind
data TyCon 	{-# GHC_PRAGMA SynonymTyCon Unique FullName Int [TyVarTemplate] UniType Bool | DataTyCon Unique FullName Int [TyVarTemplate] [Id] [Class] Bool | TupleTyCon Int | PrimTyCon Unique FullName Int ([PrimKind] -> PrimKind) | SpecTyCon TyCon [Labda UniType] #-}
data UniType 	{-# GHC_PRAGMA UniTyVar TyVar | UniFun UniType UniType | UniData TyCon [UniType] | UniSyn TyCon [UniType] UniType | UniDict Class UniType | UniTyVarTemplate TyVarTemplate | UniForall TyVarTemplate UniType #-}
getKindInfo :: PrimKind -> ([Char], UniType, TyCon)
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "E" _N_ _N_ #-}
getKindSize :: PrimKind -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "E" _N_ _N_ #-}
guessPrimKind :: [Char] -> PrimKind
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
isFloatingKind :: PrimKind -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "E" _F_ _IF_ARGS_ 0 1 C 20 \ (u0 :: PrimKind) -> case u0 of { _ALG_ _ORIG_ PrimKind DoubleKind  -> _!_ True [] []; _ORIG_ PrimKind FloatKind  -> _!_ True [] []; (u1 :: PrimKind) -> _!_ False [] [] } _N_ #-}
isFollowableKind :: PrimKind -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "E" _N_ _N_ #-}
retKindSize :: Int
	{-# GHC_PRAGMA _A_ 0 _N_ _N_ _N_ _N_ _N_ #-}
separateByPtrFollowness :: (a -> PrimKind) -> [a] -> ([a], [a])
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "LS" _N_ _N_ #-}
showPrimKind :: PrimKind -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "E" _N_ _N_ #-}
instance Eq PrimKind
	{-# GHC_PRAGMA _M_ PrimKind {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(PrimKind -> PrimKind -> Bool), (PrimKind -> PrimKind -> Bool)] [_CONSTM_ Eq (==) (PrimKind), _CONSTM_ Eq (/=) (PrimKind)] _N_
	 (==) = { _A_ 2 _U_ 11 _N_ _S_ "EE" _N_ _N_ },
	 (/=) = { _A_ 2 _U_ 11 _N_ _S_ "EE" _N_ _N_ } #-}
instance Ord PrimKind
	{-# GHC_PRAGMA _M_ PrimKind {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 9 _!_ _TUP_8 [{{Eq PrimKind}}, (PrimKind -> PrimKind -> Bool), (PrimKind -> PrimKind -> Bool), (PrimKind -> PrimKind -> Bool), (PrimKind -> PrimKind -> Bool), (PrimKind -> PrimKind -> PrimKind), (PrimKind -> PrimKind -> PrimKind), (PrimKind -> PrimKind -> _CMP_TAG)] [_DFUN_ Eq (PrimKind), _CONSTM_ Ord (<) (PrimKind), _CONSTM_ Ord (<=) (PrimKind), _CONSTM_ Ord (>=) (PrimKind), _CONSTM_ Ord (>) (PrimKind), _CONSTM_ Ord max (PrimKind), _CONSTM_ Ord min (PrimKind), _CONSTM_ Ord _tagCmp (PrimKind)] _N_
	 (<) = { _A_ 2 _U_ 11 _N_ _S_ "EE" _N_ _N_ },
	 (<=) = { _A_ 2 _U_ 11 _N_ _S_ "EE" _N_ _N_ },
	 (>=) = { _A_ 2 _U_ 11 _N_ _S_ "EE" _N_ _N_ },
	 (>) = { _A_ 2 _U_ 11 _N_ _S_ "EE" _N_ _N_ },
	 max = { _A_ 2 _U_ 22 _N_ _S_ "EE" _N_ _N_ },
	 min = { _A_ 2 _U_ 22 _N_ _S_ "EE" _N_ _N_ },
	 _tagCmp = { _A_ 2 _U_ 11 _N_ _S_ "EE" _N_ _N_ } #-}
instance Outputable PrimKind
	{-# GHC_PRAGMA _M_ PrimKind {-dfun-} _A_ 2 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _CONSTM_ Outputable ppr (PrimKind) _N_
	 ppr = { _A_ 2 _U_ 0120 _N_ _S_ "AL" {_A_ 1 _U_ 120 _N_ _N_ _N_ _N_} _N_ _N_ } #-}

