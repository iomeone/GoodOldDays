{-# GHC_PRAGMA INTERFACE VERSION 6 #-}
interface ProtoName where
import Id(Id)
import Maybes(Labda)
import Name(Name)
import NameTypes(FullName, ShortName)
import Outputable(NamedThing, Outputable)
import PreludePS(_PackedString)
import TyCon(TyCon)
import Unique(Unique)
data Labda a 	{-# GHC_PRAGMA Hamna | Ni a #-}
data Name 	{-# GHC_PRAGMA Short Unique ShortName | WiredInTyCon TyCon | WiredInVal Id | PreludeVal Unique FullName | PreludeTyCon Unique FullName Int Bool | PreludeClass Unique FullName | OtherTyCon Unique FullName Int Bool [Name] | OtherClass Unique FullName [Name] | OtherTopId Unique FullName | ClassOpName Unique Name _PackedString Int | Unbound _PackedString #-}
data ProtoName   = Unk _PackedString | Imp _PackedString _PackedString [_PackedString] _PackedString | Prel Name
cmpByLocalName :: ProtoName -> ProtoName -> Int#
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "SS" _N_ _N_ #-}
cmpProtoName :: ProtoName -> ProtoName -> Int#
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "SS" _N_ _N_ #-}
elemByLocalNames :: ProtoName -> [ProtoName] -> Bool
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LS" _N_ _N_ #-}
elemProtoNames :: ProtoName -> [ProtoName] -> Bool
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LS" _N_ _N_ #-}
eqByLocalName :: ProtoName -> ProtoName -> Bool
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "SS" _N_ _N_ #-}
eqProtoName :: ProtoName -> ProtoName -> Bool
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "SS" _N_ _N_ #-}
isConopPN :: ProtoName -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
mkPreludeProtoName :: Name -> ProtoName
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 1 X 2 \ (u0 :: Name) -> _!_ _ORIG_ ProtoName Prel [] [u0] _N_ #-}
instance NamedThing ProtoName
	{-# GHC_PRAGMA _M_ ProtoName {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 11 _!_ _TUP_10 [(ProtoName -> ExportFlag), (ProtoName -> Bool), (ProtoName -> (_PackedString, _PackedString)), (ProtoName -> _PackedString), (ProtoName -> [_PackedString]), (ProtoName -> SrcLoc), (ProtoName -> Unique), (ProtoName -> Bool), (ProtoName -> UniType), (ProtoName -> Bool)] [_CONSTM_ NamedThing getExportFlag (ProtoName), _CONSTM_ NamedThing isLocallyDefined (ProtoName), _CONSTM_ NamedThing getOrigName (ProtoName), _CONSTM_ NamedThing getOccurrenceName (ProtoName), _CONSTM_ NamedThing getInformingModules (ProtoName), _CONSTM_ NamedThing getSrcLoc (ProtoName), _CONSTM_ NamedThing getTheUnique (ProtoName), _CONSTM_ NamedThing hasType (ProtoName), _CONSTM_ NamedThing getType (ProtoName), _CONSTM_ NamedThing fromPreludeCore (ProtoName)] _N_
	 getExportFlag = { _A_ 1 _U_ 2 _N_ _S_ _!_ _N_ _N_ },
	 isLocallyDefined = { _A_ 1 _U_ 2 _N_ _S_ _!_ _N_ _N_ },
	 getOrigName = { _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ },
	 getOccurrenceName = { _A_ 1 _U_ 1 _N_ _S_ "S" _F_ _IF_ARGS_ 0 1 C 7 \ (u0 :: ProtoName) -> case u0 of { _ALG_ _ORIG_ ProtoName Unk (u1 :: _PackedString) -> u1; _ORIG_ ProtoName Imp (u2 :: _PackedString) (u3 :: _PackedString) (u4 :: [_PackedString]) (u5 :: _PackedString) -> u5; _ORIG_ ProtoName Prel (u6 :: Name) -> _APP_  _CONSTM_ NamedThing getOccurrenceName (Name) [ u6 ]; _NO_DEFLT_ } _N_ },
	 getInformingModules = { _A_ 1 _U_ 2 _N_ _S_ _!_ _N_ _N_ },
	 getSrcLoc = { _A_ 1 _U_ 2 _N_ _S_ _!_ _N_ _N_ },
	 getTheUnique = { _A_ 1 _U_ 2 _N_ _S_ _!_ _N_ _N_ },
	 hasType = { _A_ 1 _U_ 0 _N_ _S_ "A" {_A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _!_ False [] [] _N_} _F_ _IF_ARGS_ 0 1 X 1 \ (u0 :: ProtoName) -> _!_ False [] [] _N_ },
	 getType = { _A_ 1 _U_ 2 _N_ _S_ _!_ _N_ _N_ },
	 fromPreludeCore = { _A_ 1 _U_ 2 _N_ _S_ _!_ _N_ _N_ } #-}
instance Outputable ProtoName
	{-# GHC_PRAGMA _M_ ProtoName {-dfun-} _A_ 2 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _CONSTM_ Outputable ppr (ProtoName) _N_
	 ppr = { _A_ 2 _U_ 2122 _N_ _S_ "LS" _N_ _N_ } #-}

