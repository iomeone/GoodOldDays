{-# GHC_PRAGMA INTERFACE VERSION 6 #-}
interface HeapOffs where
import CharSeq(CSeq)
import Maybes(Labda)
import Pretty(PprStyle)
import SMRep(SMRep)
data HeapOffset 
type HpRelOffset = HeapOffset
type SpARelOffset = Int
type SpBRelOffset = Int
type VirtualHeapOffset = HeapOffset
type VirtualSpAOffset = Int
type VirtualSpBOffset = Int
addOff :: HeapOffset -> HeapOffset -> HeapOffset
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "SS" _N_ _N_ #-}
fixedHdrSize :: HeapOffset
	{-# GHC_PRAGMA _A_ 0 _N_ _N_ _N_ _N_ _N_ #-}
intOff :: Int -> HeapOffset
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(P)" {_A_ 1 _U_ 2 _N_ _N_ _N_ _N_} _N_ _N_ #-}
intOffsetIntoGoods :: HeapOffset -> Labda Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
isZeroOff :: HeapOffset -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
maxOff :: HeapOffset -> HeapOffset -> HeapOffset
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "SS" _N_ _N_ #-}
possiblyEqualHeapOffset :: HeapOffset -> HeapOffset -> Bool
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "LS" _N_ _N_ #-}
pprHeapOffset :: PprStyle -> HeapOffset -> CSeq
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LS" _N_ _N_ #-}
subOff :: HeapOffset -> HeapOffset -> HeapOffset
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "LS" _N_ _N_ #-}
totHdrSize :: SMRep -> HeapOffset
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
varHdrSize :: SMRep -> HeapOffset
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
zeroOff :: HeapOffset
	{-# GHC_PRAGMA _A_ 0 _N_ _N_ _N_ _N_ _N_ #-}

