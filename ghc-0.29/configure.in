dnl == autoconf source for the Glasgow FP tools ==
dnl (grep for '^dnl' to see the outline of this file)
dnl
dnl * INITIAL SETUP, CHOICE OF PLATFORM(S)
#!/bin/sh
#
# (c) The AQUA Project, Glasgow University, 1994-1995
#
# Configure script for the Glasgow functional programming tools
# (created automagically by autoconf...do not edit by hand)
#
# Do "./configure --help" to see what flags are available.
# (Better yet, read the documentation!)
#
# -------------------------------------------------------------------------
AC_INIT(STARTUP.in)
#
# Prepare to generate the following header files
#
AC_CONFIG_HEADER(ghc/includes/config.h literate/config.h)
# ToDo !!!!!!!!!!!!!!!!
#
# No, we don't do `--srcdir'...
if test x"$srcdir" != 'x.' ; then
    echo "This configuration does not support the \`--srcdir' option."
    exit 1
fi

# -------------------------------------------------------------------------
dnl ** choose what blobs to build (ghc,hslibs,haggis,happy,nofib,????)

# set to the name for the dir if doing it, otherwise empty
DoingGHC='ghc'
DoingHsLibs=''
DoingNoFib=''
DoingHappy=''
DoingHaggis=''
# the following are not normally changed
DoingLiterate='literate'
DoingMkWorld='mkworld'
DoingGlaFpUtils='glafp-utils'

MkWorldSetup='std'

AC_ARG_ENABLE(ghc,
   [
**********************************************************************
* Configuration options for the Glasgow functional-programming tools *
**********************************************************************

First, select *which* of the tools you want to build,
with --{enable,disable}-{ghc,hslibs,nofib,happy,haggis}.
(The default is: only GHC (Glasgow Haskell compiler).)

Second, you may set one of a few applies-in-all-cases options.
For example, --with-tmpdir=/usr/tmp.

Then you may set various options which are specifically for the
tools you choose in step 1.  For GHC, perhaps --enable-concurrent.
For NoFib, perhaps --enable-all-tests.  And so on.

The rest of this message lists all of the configure options.  If the
option is enabled by default, the message says how to disable it.  And
vice versa.

If you are confused, don't forget the installation documents that came
with the software!

*******************************************************************
** FOR SELECTING WHICH GLASGOW FP TOOLS TO BUILD:

--disable-ghc     do *not* build GHC as part of Glasgow FP tools],
   [case "$enableval" in
        yes) DoingGHC='ghc'
             ;;
        no)  DoingGHC=''
             ;;
        *)   echo "I don't understand this option: --enable-ghc=$enableval"
             exit 1
             ;;
    esac])
if test "xxx$DoingGHC" = 'xxxghc' -a \( ! -d ghc \) ; then
    DoingGHC=''
    echo 'Doing --disable-ghc, as there is no ghc directory'
fi
ghc_mkworld_site_ghc_jm='ghc/mkworld/site-ghc.jm'
ghc_includes_platform_h='ghc/includes/platform.h'
# duznae work: ghc_includes_config_h='ghc/includes/config.h'
if test "xxx$DoingGHC" = 'xxx' ; then
    ghc_mkworld_site_ghc_jm=''
    ghc_includes_platform_h=''
#   ghc_includes_config_h=''
fi

AC_ARG_ENABLE(hslibs,
   [--enable-hslibs   build suite of Haskell libraries],
   [case "$enableval" in
        yes) DoingHsLibs='hslibs'
             ;;
        no)  DoingHsLibs=''
             ;;
        *)   echo "I don't understand this option: --enable-hslibs=$enableval"
             exit 1
             ;;
    esac])
if test "xxx$DoingHsLibs" = 'xxxhslibs' -a \( ! -d hslibs \) ; then
    DoingHsLibs=''
    echo 'Doing --disable-hslibs, as there is no hslibs directory'
fi
hslibs_mkworld_site_hslibs_jm='hslibs/mkworld/site-hslibs.jm'
if test "xxx$DoingHsLibs" = 'xxx' ; then
    hslibs_mkworld_site_hslibs_jm=''
fi

AC_ARG_ENABLE(nofib,
   [--enable-nofib    build NoFib suite as part of Glasgow FP tools],
   [case "$enableval" in
        yes) DoingNoFib='nofib'
             ;;
        no)  DoingNoFib=''
             ;;
        *)   echo "I don't understand this option: --enable-nofib=$enableval"
             exit 1
             ;;
    esac])
if test "xxx$DoingNoFib" = 'xxxnofib' -a \( ! -d nofib \) ; then
    DoingNoFib=''
    echo 'Doing --disable-nofib, as there is no nofib directory'
fi
nofib_mkworld_site_nofib_jm='nofib/mkworld/site-nofib.jm'
if test "xxx$DoingNoFib" = 'xxx' ; then
    nofib_mkworld_site_nofib_jm=''
fi

AC_ARG_ENABLE(happy,
   [--enable-happy    build Happy parser-generator as part of Glasgow FP tools],
   [case "$enableval" in
        yes) DoingHappy='happy'
             ;;
        no)  DoingHappy=''
             ;;
        *)   echo "I don't understand this option: --enable-happy=$enableval"
             exit 1
             ;;
    esac])
if test "xxx$DoingHappy" = 'xxxhappy' -a \( ! -d happy \) ; then
    DoingHappy=''
    echo 'Doing --disable-happy, as there is no happy directory'
fi

AC_ARG_ENABLE(haggis,
   [--enable-haggis   build Haggis GUI toolkit as part of Glasgow FP tools],
   [case "$enableval" in
        yes) DoingHaggis='haggis'
             ;;
        no)  DoingHaggis=''
             ;;
        *)   echo "I don't understand this option: --enable-haggis=$enableval"
             exit 1
             ;;
    esac])
if test "xxx$DoingHaggis" = 'xxxhaggis' -a \( ! -d haggis \) ; then
    DoingHaggis=''
    echo 'Doing --disable-haggis, as there is no haggis directory'
fi

AC_ARG_ENABLE(literate,
   [
The following three are \`for hackers only':
--disable-literate    do *not* build literate-programming stuff],
   [case "$enableval" in
        yes) DoingLiterate='literate'
             ;;
        no)  DoingLiterate=''
             ;;
        *)   echo "I don't understand this option: --enable-literate=$enableval"
             exit 1
             ;;
    esac])
if test "xxx$DoingLiterate" = 'xxxliterate' -a \( ! -d literate \) ; then
    DoingLiterate=''
    echo 'Doing --disable-literate, as there is no literate directory'
fi

AC_ARG_ENABLE(mkworld,
   [--disable-mkworld     do *not* build \`mkworld' configuration stuff],
   [case "$enableval" in
        yes) DoingMkWorld='mkworld'
             ;;
        no)  DoingMkWorld=''
             ;;
        *)   echo "I don't understand this option: --enable-mkworld=$enableval"
             exit 1
             ;;
    esac])
if test "xxx$DoingMkWorld" = 'xxxmkworld' -a \( ! -d mkworld \) ; then
    DoingMkWorld=''
    echo 'Doing --disable-mkworld, as there is no mkworld directory'
fi

AC_ARG_ENABLE(glafp-utils,
   [--disable-glafp-utils do *not* build \`glafp utilities'],
   [case "$enableval" in
        yes) DoingGlaFpUtils='glafp-utils'
             ;;
        no)  DoingGlaFpUtils=''
             ;;
        *)   echo "I don't understand this option: --enable-glafp-utils=$enableval"
             exit 1
             ;;
    esac])
if test "xxx$DoingGlaFpUtils" = 'xxxglafp-utils' -a \( ! -d glafp-utils \) ; then
    DoingGlaFpUtils=''
    echo 'Doing --disable-glafp-utils, as there is no glafp-utils directory'
fi

AC_SUBST(DoingGHC)
AC_SUBST(DoingHsLibs)
AC_SUBST(DoingNoFib)
AC_SUBST(DoingHappy)
AC_SUBST(DoingHaggis)
AC_SUBST(DoingLiterate)
AC_SUBST(DoingMkWorld)
AC_SUBST(DoingGlaFpUtils)

# -------------------------------------------------------------------------
dnl ** choose host(/target/build) platform
# Guess host/target/build platform(s) if necessary.
# Partly stolen from GCC "configure".
#
if test "x$target" = xNONE ; then
    if test "x$nonopt" != xNONE ; then
        target=$nonopt
    else
        # This way of testing the result of a command substitution is
        # defined by Posix.2 (section 3.9.1) as well as traditional shells.
        if target=`$srcdir/config.guess` ; then
            echo "Configuring for a ${target} host." 1>&2
        else
            echo 'Config.guess failed to determine the host type.  You need \
to specify one.' 1>&2
            if test -r config.status ; then
                tail +2 config.status 1>&2
            fi
            exit 1
        fi
    fi
fi

# "$host" defaults to "$target"
if test "x$host" = xNONE ; then
    host=$target
fi
# "$build" defaults to "$host"
if test "x$build" = xNONE ; then
    build=$host
else
    echo "This configuration does not support the \`--build' option."
    exit 1
fi

dnl ** canonicalize platform names
# Canonicali[sz]e those babies
BuildPlatform=`/bin/sh $srcdir/config.sub $build` || exit 1
HostPlatform=`/bin/sh $srcdir/config.sub $host` || exit 1
TargetPlatform=`/bin/sh $srcdir/config.sub $target` || exit 1

if test x"$TargetPlatform" != x"$HostPlatform" ; then
    echo "GHC configuration does not support differing host/target (i.e., cross-compiling)"
    exit 1
fi

# The following will be more difficult when we *are* cross-compiling.
# Suitable names to slam in *_CPP are in platform.h.in.
# We also record the architecture, vendor, and operating system (OS)
# separately.
case $HostPlatform in
alpha-dec-osf[[1234]]*)
	HostPlatform=alpha-dec-osf1 # canonicalise for our purposes
	TargetPlatform=alpha-dec-osf1 # this will work for now... (hack)
	BuildPlatform=alpha-dec-osf1 #hack
        HostPlatform_CPP='alpha_dec_osf1'
        HostArch_CPP='alpha'
        HostVendor_CPP='dec'
        HostOS_CPP='osf1'
        ;;
hppa1.1-hp-hpux*)
	HostPlatform=hppa1.1-hp-hpux # canonicalise for our purposes (hack)
	TargetPlatform=hppa1.1-hp-hpux
	BuildPlatform=hppa1.1-hp-hpux
        HostPlatform_CPP='hppa1_1_hp_hpux'
        HostArch_CPP='hppa1_1'
        HostVendor_CPP='hp'
        HostOS_CPP='hpux'
        ;;
i[[3456]]86-*-linuxaout*)
	HostPlatform=i386-unknown-linuxaout # hack again
	TargetPlatform=i386-unknown-linuxaout
	BuildPlatform=i386-unknown-linuxaout
        HostPlatform_CPP='i386_unknown_linuxaout'
        HostArch_CPP='i386'
        HostVendor_CPP='unknown'
        HostOS_CPP='linuxaout'
        ;;
i[[3456]]86-*-linux*)
	HostPlatform=i386-unknown-linux # hack again
	TargetPlatform=i386-unknown-linux
	BuildPlatform=i386-unknown-linux
        HostPlatform_CPP='i386_unknown_linux'
        HostArch_CPP='i386'
        HostVendor_CPP='unknown'
        HostOS_CPP='linux'
        ;;
i[[3456]]86-*-freebsd*)
	HostPlatform=i386-unknown-freebsd # hack again
	TargetPlatform=i386-unknown-freebsd
	BuildPlatform=i386-unknown-freebsd
        HostPlatform_CPP='i386_unknown_freebsd'
        HostArch_CPP='i386'
        HostVendor_CPP='unknown'
        HostOS_CPP='freebsd'
        ;;
i[[3456]]86-*-netbsd*)
	HostPlatform=i386-unknown-netbsd # hack again
	TargetPlatform=i386-unknown-netbsd
	BuildPlatform=i386-unknown-netbsd
        HostPlatform_CPP='i386_unknown_netbsd'
        HostArch_CPP='i386'
        HostVendor_CPP='unknown'
        HostOS_CPP='netbsd'
        ;;
i[[3456]]86-*-solaris2*)
	HostPlatform=i386-unknown-solaris2 # hack again
	TargetPlatform=i386-unknown-solaris2
	BuildPlatform=i386-unknown-solaris2
        HostPlatform_CPP='i386_unknown_solaris2'
        HostArch_CPP='i386'
        HostVendor_CPP='unknown'
        HostOS_CPP='solaris2'
        ;;
m68k-next-nextstep2)
        HostPlatform_CPP='m68k_next_nextstep2'
        HostArch_CPP='m68k'
        HostVendor_CPP='next'
        HostOS_CPP='nextstep2'
        ;;
m68k-next-nextstep3)
        HostPlatform_CPP='m68k_next_nextstep3'
        HostArch_CPP='m68k'
        HostVendor_CPP='next'
        HostOS_CPP='nextstep3'
        ;;
i[[3456]]86-next-nextstep3)
	HostPlatform=i386-next-nextstep3 # hack again
	TargetPlatform=i386-next-nextstep3
	BuildPlatform=i386-next-nextstep3
        HostPlatform_CPP='i386_next_nextstep3'
        HostArch_CPP='i386'
        HostVendor_CPP='next'
        HostOS_CPP='nextstep3'
        ;;
m68k-sun-sunos4*)
	HostPlatform=m68k-sun-sunos4
	TargetPlatform=m68k-sun-sunos4 #hack
	BuildPlatform=m68k-sun-sunos4 #hack
        HostPlatform_CPP='m68k_sun_sunos4'
        HostArch_CPP='m68k'
        HostVendor_CPP='sun'
        HostOS_CPP='sunos4'
        ;;
mips-dec-ultrix*)
        HostPlatform_CPP='mips_dec_ultrix'
        HostArch_CPP='mipsel'   # NB a little different
        HostVendor_CPP='dec'
        HostOS_CPP='ultrix'
        ;;
mips-sgi-irix*)
	HostPlatform=mips-sgi-irix
	TargetPlatform=mips-sgi-irix #hack
	BuildPlatform=mips-sgi-irix #hack
        HostPlatform_CPP='mips_sgi_irix'
        HostArch_CPP='mipseb'   # NB a little different
        HostVendor_CPP='sgi'
        HostOS_CPP='irix'
        ;;
powerpc-ibm-aix*)
	HostPlatform=powerpc-ibm-aix
	TargetPlatform=powerpc-ibm-aix #hack
	BuildPlatform=powerpc-ibm-aix #hack
        HostPlatform_CPP='powerpc_ibm_aix'
        HostArch_CPP='powerpc'
        HostVendor_CPP='ibm'
        HostOS_CPP='aix'
        ;;
sparc-sun-sunos4*)
	HostPlatform=sparc-sun-sunos4
	TargetPlatform=sparc-sun-sunos4 #hack
	BuildPlatform=sparc-sun-sunos4 #hack
        HostPlatform_CPP='sparc_sun_sunos4'
        HostArch_CPP='sparc'
        HostVendor_CPP='sun'
        HostOS_CPP='sunos4'
        ;;
sparc-sun-solaris2*)
	HostPlatform=sparc-sun-solaris2
	TargetPlatform=sparc-sun-solaris2 #hack
	BuildPlatform=sparc-sun-solaris2 #hack
        HostPlatform_CPP='sparc_sun_solaris2'
        HostArch_CPP='sparc'
        HostVendor_CPP='sun'
        HostOS_CPP='solaris2'
        ;;
*)
        echo "Unrecognised platform: $HostPlatform"
        exit 1
        ;;
esac

test -n "$verbose" && echo "Host platform set to $HostPlatform"
test -n "$verbose" -a x"$HostPlatform" != x"$TargetPlatform" \
        && echo "Target platform set to $TargetPlatform"
test -n "$verbose" -a x"$BuildPlatform" != x"$HostPlatform" \
        && echo "Build platform set to $BuildPlatform"

BuildPlatform_CPP=$HostPlatform_CPP
TargetPlatform_CPP=$HostPlatform_CPP
BuildArch_CPP=$HostArch_CPP
TargetArch_CPP=$HostArch_CPP
BuildOS_CPP=$HostOS_CPP
TargetOS_CPP=$HostOS_CPP
BuildVendor_CPP=$HostVendor_CPP
TargetVendor_CPP=$HostVendor_CPP
dnl Cannot afford all these AC_SUBSTs (because of braindead seds w/ 99 cmd limits
dnl AC_SUBST(BuildPlatform)
AC_SUBST(HostPlatform)
dnl AC_SUBST(TargetPlatform)
AC_SUBST(HostPlatform_CPP)
dnl AC_SUBST(BuildPlatform_CPP)
dnl AC_SUBST(TargetPlatform_CPP)
AC_SUBST(HostArch_CPP)
dnl AC_SUBST(BuildArch_CPP)
dnl AC_SUBST(TargetArch_CPP)
AC_SUBST(HostOS_CPP)
dnl AC_SUBST(BuildOS_CPP)
dnl AC_SUBST(TargetOS_CPP)
AC_SUBST(HostVendor_CPP)
dnl AC_SUBST(BuildVendor_CPP)
dnl AC_SUBST(TargetVendor_CPP)

# -------------------------------------------------------------------------
dnl
dnl * _GENERAL_ CONFIGURATION CHECKS
#
dnl ** are we at Glasgow?
#
if test -d /local/fp -a -d /users/fp/simonpj; then
    echo "Brilliant!  You must be a Glaswegian."
    AT_GLASGOW=1
    if test "x$prefix" = xNONE; then
        prefix=/local/fp
        echo "Assuming installation prefix of $prefix"
    fi
    if test "x$exec_prefix" = xNONE; then
        # Sigh: the defn of exec_prefix does not include the bin* bit...
        # WDP 94/07
        exec_prefix=/local/fp
        echo "Assuming binary installation prefix of $exec_prefix"
    fi
else
    AT_GLASGOW=0
fi
AC_SUBST(AT_GLASGOW)
test -n "$verbose" && echo "    setting AT_GLASGOW to $AT_GLASGOW"
#
#
#
dnl ** does #! work?
#
AC_SYS_INTERPRETER()
#
dnl ** look for `perl', but watch out for version 4.035
#
AC_CHECK_PROG(PerlCmd,perl,$ac_dir/$ac_word)
if test -z "$PerlCmd"; then
    echo "You must install perl before you can continue"
    echo "Perhaps it is already installed, but not in your PATH?"
    exit 1
else
    $PerlCmd -v >conftest.out 2>&1
    if egrep "version 4" conftest.out >/dev/null 2>&1; then
        if egrep "Patch level: 35" conftest.out >/dev/null 2>&1; then
            echo "
************************************************************************
Uh-oh...looks like you have Perl 4.035.

Perl version 4.035 has a bug to do with recursion that will bite if
you run the lit2texi script, when making Info files from
literate files of various sorts.  Either use the current version
(4.036), an older version (e.g., perl 4.019) or apply the patch in
glafp-utils/perl-4.035-fixes to your 4.035 perl.
************************************************************************
"
        fi
    else
	if egrep "version 5" conftest.out >/dev/null 2>&1; then
	    :
	else
	    echo "I'm not sure if your version of perl will work,"
	    echo "but it's worth a shot, eh?"
	fi
    fi
    rm -fr conftest*
fi
#
dnl ** does #!.../perl work? (sometimes it's too long...)
echo "checking if \`#!$PerlCmd' works in shell scripts"
echo "#!$PerlCmd"'
exit $1;
' > conftest
chmod u+x conftest
(SHELL=/bin/sh; export SHELL; ./conftest 69 > /dev/null)
if test $? -ne 69; then
   echo "It does!"
else
   echo "It doesn't!  Perhaps \`#!$PerlCmd' is too long (often 32 characters max)"
   exit 1
fi
rm -f conftest
#
dnl ** check if perl library is properly installed
# (by seeing if a "do 'getopts.pl'" works...
if $PerlCmd -e 'do "getopts.pl" || exit(1); exit(0);' > /dev/null 2>&1 ; then
    :
else
    echo "I think your perl library is misinstalled."
    echo "The following script did not work:"
    echo '      do "getopts.pl" || exit(1); exit(0);'
    exit 1
fi
#
#
dnl ** look for GCC and find out which version
# Figure out which C compiler to use.  Gcc is preferred.
# If gcc, make sure it's at least 2.1
#
AC_PROG_CC
if test -z "$GCC"; then
    echo "You would be better off with gcc"
    echo "Perhaps it is already installed, but not in your PATH?"
    HaveGcc='NO'
else
    gcc -v > conftest.out 2>&1
    echo '/version (\d+)\.(\d+)/ && $1*10+$2 > 20 && print "YES";' > conftest.pl
    HaveGcc=`eval $PerlCmd -n conftest.pl conftest.out`
    if test -z "$HaveGcc"; then
        echo "I'm not sure if your version of gcc will work,"
        echo "but it's worth a shot, eh?"
        HaveGcc='YES'
    fi
    rm -fr conftest*
fi
AC_SUBST(HaveGcc)
AC_C_CROSS
#
dnl ** figure out how to do context diffs
# (NB: NeXTStep thinks diff'ing a file against itself is "trouble")
#
echo foo > conftest1
echo foo > conftest2
if diff -C 1 conftest1 conftest2 > /dev/null 2>&1 ; then
    ContextDiffCmd='diff -C 1'
else
    if diff -c1 conftest1 conftest2 > /dev/null 2>&1 ; then
        ContextDiffCmd='diff -c1'
    else
        echo "Can't figure out how to do context diffs."
        echo "Neither \`diff -C 1' nor \`diff -c1' works."
        exit 1
    fi
fi
rm -f conftest1 conftest2
AC_SUBST(ContextDiffCmd)
#
dnl ** look for a decent parser generator (bison preferred)
#
#
AC_CHECK_PROG(YaccCmd, bison, bison -y)
if test -z "$YaccCmd"; then
    echo "Can't find bison out there..."
    AC_CHECK_PROG(WhatCmd, what, what, :)
    AC_CHECK_PROG(YaccCmd, yacc, $ac_dir/$ac_word)
    if test -z "$YaccCmd"; then
        echo "But that's okay...I can't find yacc either."
        YaccCmd=:
    else
        $WhatCmd $YaccCmd > conftest.out
        if egrep 'y1\.c 1\..*SMI' conftest.out >/dev/null 2>&1; then
            echo "I don't trust your $YaccCmd; it looks like an old Sun yacc"
            if test -x /usr/lang/yacc; then
                echo "I'm going to use /usr/lang/yacc instead"
                YaccCmd=/usr/lang/yacc
            else
                echo "I'm assuming the worst...no parser generator at all"
                YaccCmd=:
            fi
        elif egrep 'y1\.c.*Revision: 4\.2\.6\.3.*DEC' conftest.out >/dev/null 2>&1; then
            echo "I don't trust your $YaccCmd; it looks like a lame DEC yacc"
            echo "I'm assuming the worst...no parser generator at all"
            YaccCmd=:
        else
            echo "But that's okay...as far as I know, your yacc will work."
        fi
        rm -fr conftest*
    fi
fi

dnl ** Find lex command (lex or flex) and library (-ll or -lfl)
#
AC_PROG_LEX

#--------------------------------------------------------------
WithHc='haskell-compiler-unspecified'
WithHcType='HC_UNSPECIFIED'

AC_ARG_WITH(hc,
   [
*******************************************************************
** GENERAL OPTIONS WHICH APPLY TO ALL TOOLS:

--with-hc=<Haskell compiler>
          ghc*     => Glasgow Haskell invoked by the name given
          hbc*     => Chalmers HBC, invoked by the name given
          nhc*     => Niklas Rojemo's "nhc", invoked by the name given
          C or c   => Don't use a Haskell compiler;
                      build from intermediate C (.hc) files.
          in-place => Use ghc/driver/ghc; i.e. you've built GHC
                      and you want to use it un-installed ("in-place").
   ],
   [case "$withval" in
        ghc* | glhc* )
                WithHc=$withval
                ;;
        hbc* )  WithHc=$withval
                ;;
        nhc* )  WithHc=$withval
                ;;
        c | C)  WithHc='C'
                ;;
        in-place )
                WithHc='IN-PLACE'
                ;;
        *)      echo "I don't understand this option: --with-hc=$withval"
                exit 1
                ;;
    esac])

# make sure that what they said makes sense.... set WithHcType
case $WithHc in
    haskell-compiler-unspecified ) # maybe they will say something later...
	    ;;
    ghc* | glhc* )
	    WithHcType='HC_GLASGOW_GHC'
            AC_CHECK_PROG(have_ghc,$WithHc,$ac_dir/$ac_word)
            if test -z "$have_ghc"; then
                echo "Can't find Glasgow Haskell to compile with: $WithHc"
		exit 1
            fi
            ;;
    hbc* )  # Look for the dastardly competition
	    WithHcType='HC_CHALMERS_HBC'
            AC_CHECK_PROG(have_hbc,$WithHc,YES,NO)
            if test $have_hbc = 'NO' ; then
                echo "Can't find Chalmers HBC to compile with: $WithHc"
                exit 1
            fi
            ;;
    nhc* )  # Look for Niklas Rojemo's "nhc"
	    WithHcType='HC_ROJEMO_NHC'
            AC_CHECK_PROG(have_nhc,$WithHc,YES,NO)
            if test $have_nhc = 'NO' ; then
                echo "Can't find Niklas Rojemo's NHC to compile with: $WithHc"
                exit 1
            fi
            ;;
    c | C)  WithHcType='HC_USE_HC_FILES'
            ;;
    IN-PLACE) WithHcType='HC_GLASGOW_GHC'
	    ;;
esac
AC_SUBST(WithHc)
AC_SUBST(WithHcType)

dnl ** Possibly use something else instead of 'gcc'.
WhatGccIsCalled=gcc
AC_ARG_WITH(gcc,
   [--with-gcc=<gcc command>
	Use a different command instead of 'gcc' for the GNU C compiler.],
   [HaveGcc=YES; WhatGccIsCalled="$withval"])
AC_SUBST(WhatGccIsCalled)

dnl ** Choose which make to use (default 'make -r')
MakeCmd='make -r'
AC_ARG_WITH(make,
   [ 
--with-make=<make command> 
	Use an alternate command instead of 'make'.],
   [MakeCmd="$withval"]) 
AC_SUBST(MakeCmd)

dnl ** possibly choose a different tmpdir (default /tmp)
# let the user decide where the best tmpdir is
# /tmp is the default; /usr/tmp is sometimes a good choice.
# Very site-specific.
TmpDir='/tmp'
AC_ARG_WITH(tmpdir,
   [
--with-tmpdir=<temp directory> 
	Use an alternative directory for temporary files (presumably
	because /tmp is too small).],
   [TmpDir="$withval"])
AC_SUBST(TmpDir)

dnl ** possibly set a max heap for Haskell compilations
# let the user specify a maximum heap to be used; the old
# "I have a 64MB machine, why not use a 32MB heap?" thing.
HcMaxHeapWasSet='NO'
HcMaxHeap='0'
AC_ARG_WITH(max-heap,
   [
--with-max-heap=<heap size, e.g., 32m> 
	Do all Haskell compilations with a heap of this size.  (If
	you've got it, flaunt it.)],
   [HcMaxHeapWasSet='YES'
    HcMaxHeap="$withval"])
AC_SUBST(HcMaxHeapWasSet)
AC_SUBST(HcMaxHeap)

dnl ** figure out about mkdependHS
MkDependHSCmd='mkdependHS'
if test -f ./ghc/utils/mkdependHS/mkdependHS \
     -o -f ./ghc/utils/mkdependHS/mkdependHS.prl ; then
    MkDependHSCmd='TopDirPwd/ghc/utils/mkdependHS/mkdependHS'
fi
AC_ARG_WITH(mkdependHS,
   [--with-mkdependHS=<mkdependHS command>
	Use a different command instead of 'mkdependHS'.],
   [MkDependHSCmd="$withval"])
dnl AC_CHECK_PROG(have_mkdependHS,$MkDependHSCmd,YES,NO)
dnl if test $have_mkdependHS = 'NO' ; then
dnl    MkDependHSCmd=':'
dnl fi
AC_SUBST(MkDependHSCmd)

# -------------------------------------------------------------------------
#
dnl ** figure out how to invoke cpp directly (gcc -E is no good)
#
AC_PROG_CPP
if echo $CPP | egrep gcc >/dev/null 2>&1; then
    echo > conftest.c
    gcc -v -E conftest.c >/dev/null 2>conftest.out
    echo '/(\S+\/cpp)/ && print "$1";' > conftest.pl
    GNUCPP="`eval $PerlCmd -n conftest.pl conftest.out`"
    test -n "$verbose" && echo "        setting GNUCPP to $GNUCPP"
    RAWCPP="`eval $PerlCmd -n conftest.pl conftest.out` -traditional"
    test -n "$verbose" && echo "        setting RAWCPP to $RAWCPP"
    rm -fr conftest*
fi
# ToDo: what are GNUCPP and RAWCPP if the above if didn't fire? WDP 95/02
AC_SUBST(GNUCPP)
AC_SUBST(RAWCPP)
#
dnl ** figure out how to do a BSD-ish install
#
AC_PROG_INSTALL
#
dnl ** figure out what arguments to feed to `ar'
#
AC_CHECK_PROG(ArCmd,ar,$ac_dir/$ac_word)
if test -z "$ArCmd"; then
    echo "You don't seem to have ar...I have no idea how to make a library"
    exit 1;
fi
if $ArCmd clqs conftest.a >/dev/null 2>/dev/null; then
    ArCmd="$ArCmd clqs"
    NeedRanLib=''
elif $ArCmd cqs conftest.a >/dev/null 2>/dev/null; then
    ArCmd="$ArCmd cqs"
    NeedRanLib=''
elif $ArCmd clq conftest.a >/dev/null 2>/dev/null; then
    ArCmd="$ArCmd clq"
    NeedRanLib='YES'
elif $ArCmd cq conftest.a >/dev/null 2>/dev/null; then
    ArCmd="$ArCmd cq"
    NeedRanLib='YES'
elif $ArCmd cq conftest.a 2>&1 | grep 'no archive members specified' >/dev/null 2>/dev/null; then
    ArCmd="$ArCmd cq"
    NeedRanLib='YES'
else
    echo "I can't figure out how to use your $ArCmd"
    exit 1
fi
rm -rf conftest*
test -n "$ArCmd" && test -n "$verbose" && echo "        setting ArCmd to $ArCmd"
AC_SUBST(ArCmd)
#
dnl ** figure out if we need `ranlib'
#
if test -z "$NeedRanLib"; then
    # we hackily override a few platforms on a case-by-case basis
    case $HostPlatform in
    i386-*-linuxaout)
	NeedRanLib='YES'
	;;
    *)	RANLIB=':'
	;;
    esac
    test -n "$verbose" && echo "        setting RANLIB to $RANLIB"
fi
if test -n "$NeedRanLib"; then
    AC_PROG_RANLIB
fi
AC_SUBST(RANLIB)
#
dnl ** check for full ANSI header (.h) files
#
AC_HEADER_STDC
#
dnl ** check for specific header (.h) files that we are interested in
#
AC_CHECK_HEADERS(dirent.h fcntl.h grp.h malloc.h memory.h nlist.h pwd.h siginfo.h signal.h stdlib.h string.h sys/fault.h sys/file.h sys/mman.h sys/param.h sys/procfs.h sys/resource.h sys/signal.h sys/socket.h sys/stat.h sys/syscall.h sys/time.h sys/timeb.h sys/timers.h sys/times.h sys/types.h sys/utsname.h sys/vadvise.h sys/wait.h termios.h time.h types.h unistd.h utime.h vfork.h )
#
dnl ** check if it is safe to include both <time.h> and <sys/time.h>
#
AC_HEADER_TIME
#
dnl ** how do we get a timezone name?
#
AC_STRUCT_TIMEZONE
# 
dnl ** determine the type of signal()
#
AC_TYPE_SIGNAL
#
dnl ** check for specific library functions that we are interested in
#
AC_CHECK_FUNCS(access ftime getclock getpagesize getrusage gettimeofday mktime mprotect setitimer stat sysconf timelocal times vadvise vfork)
#
dnl ** can we get alloca?
#
AC_FUNC_ALLOCA
#
dnl ** determine whether or not const works
#
AC_C_CONST
#
dnl ** check for leading underscores in symbol names
# We assume that they _aren't_ there if anything goes wrong.
#
echo checking for a leading underscore in symbol names
AC_TRY_RUN(
[#ifdef HAVE_NLIST_H
#include <nlist.h>
struct nlist xYzzY[] = {{"_xYzzY", 0},{0}};
#endif

main(argc, argv)
int argc;
char **argv;
{
#ifdef HAVE_NLIST_H
    if(nlist(argv[0], xYzzY) == 0 && xYzzY[0].n_value != 0)
        exit(0);
#endif
    exit(1);
}], LeadingUnderscore='YES', LeadingUnderscore='NO', LeadingUnderscore='YES')
test -n "$verbose" && echo "    setting LeadingUnderscore to $LeadingUnderscore"

# -------------------------------------------------------------------------
dnl
dnl * `GHC' CONFIGURATION STUFF

if test "xxx$DoingGHC" = 'xxxghc' ; then
# a very big "if"!
#
dnl ** which builds to build?
# builds: normal = sequential _ap_o ; _p = profiling (sequential);
# _t = ticky; _u = unregisterized
GhcBuild_normal='YES'
GhcBuild_p='YES'
GhcBuild_t='NO'
GhcBuild_u='NO'
# _mc = concurrent; _mr = profiled concurrent; _mt = ticky concurrent
# _mp = parallel; _mg = gransim
GhcBuild_mc='NO'
GhcBuild_mr='NO'
GhcBuild_mt='NO'
GhcBuild_mp='NO'
GhcBuild_mg='NO'
# GC builds: _2s, _1s, _du (, _gn)
GhcBuild_2s='NO'
GhcBuild_1s='NO'
GhcBuild_du='NO'
# user builds: a...o
GhcBuild_a='NO'
GhcBuild_b='NO'
GhcBuild_c='NO'
GhcBuild_d='NO'
GhcBuild_e='NO'
GhcBuild_f='NO'
GhcBuild_g='NO'
GhcBuild_h='NO'
GhcBuild_i='NO'
GhcBuild_j='NO'
GhcBuild_k='NO'
GhcBuild_l='NO'
GhcBuild_m='NO'
GhcBuild_n='NO'
GhcBuild_o='NO'
GhcBuild_A='NO'
GhcBuild_B='NO'
# More could be added here...

AC_ARG_ENABLE(normal-build,
   [
*******************************************************************
** \`GHC' (GLASGOW HASKELL COMPILER) OPTIONS:

Choose all the \`builds' of GHC that you want:

--disable-normal-build do *not* build GHC for normal sequential code],
   [case "$enableval" in
        yes) GhcBuild_normal='YES'
             ;;
        no)  GhcBuild_normal='NO'
             ;;
        *)   echo "I don't understand this option: --enable-normal-build=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(profiling,
   [--disable-profiling    do *not* build profiling features],
   [case "$enableval" in
        yes) GhcBuild_p='YES'
             ;;
        no)  GhcBuild_p='NO'
             ;;
        *)   echo "I don't understand this option: --enable-profiling=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(ticky,
   [--enable-ticky         build for \`ticky-ticky' profiling (for implementors)],
   [case "$enableval" in
        yes) GhcBuild_t='YES'
             ;;
        no)  GhcBuild_t='NO'
             ;;
        *)   echo "I don't understand this option: --enable-ticky=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(concurrent,
   [--enable-concurrent    turn on \`concurrent Haskell' features],
   [case "$enableval" in
        yes) GhcBuild_mc='YES'
             ;;
        no)  GhcBuild_mc='NO'
             ;;
        *)   echo "I don't understand this option: --enable-concurrent=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(profiled-concurrent,
   [--enable-profiled-concurrent turn on profiling for \`concurrent Haskell'],
   [case "$enableval" in
        yes) GhcBuild_mr='YES'
             ;;
        no)  GhcBuild_mr='NO'
             ;;
        *)   echo "I don't understand this option: --enable-profiled-concurrent=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(ticky-concurrent,
   [--enable-ticky-concurrent turn on \`ticky-ticky' profiling for \`concurrent Haskell'],
   [case "$enableval" in
        yes) GhcBuild_mt='YES'
             ;;
        no)  GhcBuild_mt='NO'
             ;;
        *)   echo "I don't understand this option: --enable-ticky-concurrent=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(parallel,
   [--enable-parallel      turn on \`parallel Haskell' features],
   [case "$enableval" in
        yes) GhcBuild_mp='YES';
             ;;
        no)  GhcBuild_mp='NO'
             ;;
        *)   echo "I don't understand this option: --enable-parallel=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(gransim,
   [--enable-gransim       turn on GranSim parallel simulator],
   [case "$enableval" in
        yes) GhcBuild_mg='YES';
             ;;
        no)  GhcBuild_mg='NO'
             ;;
        *)   echo "I don't understand this option: --enable-gransim=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(gc-2s,
   [--enable-gc-2s         a build with the 2-space copying garbage collector],
   [case "$enableval" in
        yes) GhcBuild_2s='YES'
             ;;
        no)  GhcBuild_2s='NO'
             ;;
        *)   echo "I don't understand this option: --enable-gc-2s=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(gc-1s,
   [--enable-gc-1s         a build with the 1-space compacting garbage collector],
   [case "$enableval" in
        yes) GhcBuild_1s='YES'
             ;;
        no)  GhcBuild_1s='NO'
             ;;
        *)   echo "I don't understand this option: --enable-gc-1s=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(gc-du,
   [--enable-gc-du         a build with \`dual-mode' (1s/2s) garbage collector],
   [case "$enableval" in
        yes) GhcBuild_du='YES'
             ;;
        no)  GhcBuild_du='NO'
             ;;
        *)   echo "I don't understand this option: --enable-gc-du=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-a,
   [--enable-user-way-a    build for \`user way a' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_a='YES'
             ;;
        no)  GhcBuild_a='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-a=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-b,
   [--enable-user-way-b    build for \`user way b' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_b='YES'
             ;;
        no)  GhcBuild_b='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-b=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-c,
   [--enable-user-way-c    build for \`user way c' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_c='YES'
             ;;
        no)  GhcBuild_c='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-c=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-d,
   [--enable-user-way-d    build for \`user way d' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_d='YES'
             ;;
        no)  GhcBuild_d='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-d=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-e,
   [--enable-user-way-e    build for \`user way e' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_e='YES'
             ;;
        no)  GhcBuild_e='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-e=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-f,
   [--enable-user-way-f    build for \`user way f' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_f='YES'
             ;;
        no)  GhcBuild_f='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-f=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-g,
   [--enable-user-way-g    build for \`user way g' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_g='YES'
             ;;
        no)  GhcBuild_g='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-g=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-h,
   [--enable-user-way-h    build for \`user way h' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_h='YES'
             ;;
        no)  GhcBuild_h='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-h=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-i,
   [--enable-user-way-i    build for \`user way i' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_i='YES'
             ;;
        no)  GhcBuild_i='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-i=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-j,
   [--enable-user-way-j    build for \`user way j' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_j='YES'
             ;;
        no)  GhcBuild_j='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-j=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-k,
   [--enable-user-way-k    build for \`user way k' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_k='YES'
             ;;
        no)  GhcBuild_k='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-k=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-l,
   [--enable-user-way-l    build for \`user way l' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_l='YES'
             ;;
        no)  GhcBuild_l='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-l=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-m,
   [--enable-user-way-m    build for \`user way m' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_m='YES'
             ;;
        no)  GhcBuild_m='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-m=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-n,
   [--enable-user-way-n    build for \`user way n' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_n='YES'
             ;;
        no)  GhcBuild_n='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-n=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-o,
   [--enable-user-way-o    build for \`user way o' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_o='YES'
             ;;
        no)  GhcBuild_o='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-o=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-A,
   [--enable-user-way-A    build for \`user way A' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_A='YES'
             ;;
        no)  GhcBuild_A='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-A=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(user-way-B,
   [--enable-user-way-B    build for \`user way B' (mostly for implementors)],
   [case "$enableval" in
        yes) GhcBuild_B='YES'
             ;;
        no)  GhcBuild_B='NO'
             ;;
        *)   echo "I don't understand this option: --enable-user-way-B=$enableval"
             exit 1
             ;;
    esac])

dnl We do not use AC_SUBST to communicate the GhcBuild_* info,
dnl as some seds (notably OSF) only allow 99 commands (!!!).
dnl We will do the equivalent by a HACK further down.

dnl AC_SUBST(GhcBuild_normal)
dnl AC_SUBST(GhcBuild_p)
dnl AC_SUBST(GhcBuild_t)
dnl AC_SUBST(GhcBuild_u)
dnl AC_SUBST(GhcBuild_mc)
dnl AC_SUBST(GhcBuild_mr)
dnl AC_SUBST(GhcBuild_mt)
dnl AC_SUBST(GhcBuild_mp)
dnl AC_SUBST(GhcBuild_mg)
dnl AC_SUBST(GhcBuild_2s)
dnl AC_SUBST(GhcBuild_1s)
dnl AC_SUBST(GhcBuild_du)
dnl AC_SUBST(GhcBuild_a)
dnl AC_SUBST(GhcBuild_b)
dnl AC_SUBST(GhcBuild_c)
dnl AC_SUBST(GhcBuild_d)
dnl AC_SUBST(GhcBuild_e)
dnl AC_SUBST(GhcBuild_f)
dnl AC_SUBST(GhcBuild_g)
dnl AC_SUBST(GhcBuild_h)
dnl AC_SUBST(GhcBuild_i)
dnl AC_SUBST(GhcBuild_j)
dnl AC_SUBST(GhcBuild_k)
dnl AC_SUBST(GhcBuild_l)
dnl AC_SUBST(GhcBuild_m)
dnl AC_SUBST(GhcBuild_n)
dnl AC_SUBST(GhcBuild_o)
dnl AC_SUBST(GhcBuild_A)
dnl AC_SUBST(GhcBuild_B)

#---------------------------------------------------------------
#
dnl ** which Haskell compiler to bootstrap GHC with?
# Figure out what Haskell compiler(s) to use for booting
#
# first, the defaults...
WithGhcHc='haskell-compiler-unspecified'
WithGhcHcType='HC_UNSPECIFIED'
GhcBuilderVersion='28'

AC_ARG_WITH(hc-for-ghc,
   [
The Haskell compiler for bootstrapping GHC (if any); this option,
if used, overrides --with-hc=<...>:

    --with-hc-for-ghc=<Haskell compiler>
          ghc*     => Glasgow Haskell invoked by the name given
          C or c   => Don't use a Haskell compiler;
                      build from intermediate C (.hc) files.
   ],
   [case "$withval" in
        ghc* | glhc* )
                WithGhcHc=$withval
                ;;
	hbc* )  echo "HBC will not compile GHC 0.26 as is (sigh)"
		exit 1
		;;
        c | C)  WithGhcHc='C'
		WithGhcHcType='HC_USE_HC_FILES'
                ;;
        *)      echo "I don't understand this option: --with-hc-for-ghc=$withval"
                exit 1
                ;;
    esac])

# make sure that what they said makes sense.... set WithGhcHcType
case $WithGhcHc in
    haskell-compiler-unspecified ) # maybe they said something earlier...
	    if test $WithHc = 'haskell-compiler-unspecified' ; then
		echo "Neither --with-hc nor --with-hc-for-ghc was properly set"
		exit 1
	    fi
	    if test $WithHcType = 'HC_GLASGOW_GHC' ; then
                touch conftest.o
                $WithHc -v -C conftest.o > conftest.out 2>&1
                echo '/version (\d+)\.(\d+)/ && print ($1*100+$2);' > conftest.pl
                GhcBuilderVersion=`eval $PerlCmd -n conftest.pl conftest.out`
                rm -rf conftest*
	    fi
	    ;;
    ghc* | glhc* )
	    WithGhcHcType='HC_GLASGOW_GHC'
            AC_CHECK_PROG(have_ghc_ghc,$WithGhcHc,$ac_dir/$ac_word)
            if test -z "$have_ghc_ghc"; then
                echo "Can't find Glasgow Haskell to compile GHC with: $WithGhcHc"
		exit 1
	    else
                touch conftest.o
                $WithGhcHc -v -C conftest.o > conftest.out 2>&1
                echo '/version (\d+)\.(\d+)/ && print ($1*100+$2);' > conftest.pl
                GhcBuilderVersion=`eval $PerlCmd -n conftest.pl conftest.out`
                rm -rf conftest*
            fi
            ;;
    c | C)  WithGhcHcType='HC_USE_HC_FILES'
            ;;
esac
AC_SUBST(GhcBuilderVersion)
AC_SUBST(WithGhcHc)
AC_SUBST(WithGhcHcType)

dnl ** use portable (slow) C? -- preferably not
GhcWithRegisterised='YES'
AC_ARG_ENABLE(portable-C,
   [Other things for GHC:

--enable-portable-C       use portable C (slow), not \`registerised' (fast)],
   [case "$enableval" in
        yes) GhcWithRegisterised='NO'
             ;;
        no)  GhcWithRegisterised='YES'
             ;;
        *)   echo "I don't understand this option: --enable-portable-C=$enableval"
             exit 1
             ;;
    esac])

if test $GhcWithRegisterised = 'YES'; then
    case $HostPlatform in
    alpha-* | hppa1.1-* | i386-* | m68k-* | mips-* | powerpc-* | sparc-* )
       ;;
    *)
       echo "Don't know non-portable C tricks for this platform: $HostPlatform"
       GhcWithRegisterised='NO'
       ;;
    esac
fi
AC_SUBST(GhcWithRegisterised)

if test $GhcWithRegisterised = 'NO'; then
    GhcBuild_u='YES'
    GhcBuild_normal='NO'
    GhcBuild_p='NO'
fi
# ToDo: make sure we can do concurrent for platform/circs...
# ToDo: make sure we can do profiling for platform/circs...
# ToDo: make sure we can do parallel for platform/circs...
# ToDo: make sure we can do gransim for platform/circs...

dnl ** build GHC compiler proper (\`hsc') from .hc files?
GhcWithHscBuiltViaC='NO'
AC_ARG_ENABLE(hsc-built-via-C,
   [--enable-hsc-built-via-C  build compiler proper (hsc) from intermediate .hc
                          files (disabled by default)],
   [case "$enableval" in
        yes) GhcWithHscBuiltViaC='YES'
             ;;
        no)  GhcWithHscBuiltViaC='NO'
             ;;
        *)   echo "I don't understand this option: --enable-hsc-built-via-C=$enableval"
             exit 1
             ;;
    esac])
case $WithGhcHc in
    haskell-compiler-unspecified ) # maybe they said something earlier...
	    if test $WithHcType = 'HC_USE_HC_FILES' ; then
		GhcWithHscBuiltViaC='YES'
	    fi
	    ;;
    c | C)  GhcWithHscBuiltViaC='YES'
            ;;
    *)	    ;;
esac
AC_SUBST(GhcWithHscBuiltViaC)

dnl ** build \`hsc' with -O?
GhcWithHscOptimised='YES'
AC_ARG_ENABLE(hsc-optimised,
   [--disable-hsc-optimised   don't build compiler proper (hsc) with -O],
   [case "$enableval" in
        yes) GhcWithHscOptimised='YES'
             ;;
        no)  GhcWithHscOptimised='NO'
             ;;
        *)   echo "I don't understand this option: --enable-hsc-optimised=$enableval"
             exit 1
             ;;
    esac])
AC_SUBST(GhcWithHscOptimised)

dnl ** build \`hsc' with -DDEBUG?
GhcWithHscDebug='NO'
AC_ARG_ENABLE(hsc-debug,
   [--enable-hsc-debug        build compiler proper (hsc) with -DDEBUG],
   [case "$enableval" in
        yes) GhcWithHscDebug='YES'
             ;;
        no)  GhcWithHscDebug='NO'
             ;;
        *)   echo "I don't understand this option: --enable-hsc-debug=$enableval"
             exit 1
             ;;
    esac])
AC_SUBST(GhcWithHscDebug)

dnl ** omit native-code generator from \`hsc'?
GhcWithNativeCodeGen='YES'
AC_ARG_ENABLE(native-code-generator,
   [--enable-native-code-generator  build an n.c.g.
                          [enabled for supported platforms]],
   [case "$enableval" in
        yes) GhcWithNativeCodeGen='YES'
             ;;
        no)  GhcWithNativeCodeGen='NO'
             ;;
        *)   echo "I don't understand this option: --enable-native-code-generator=$enableval"
             exit 1
             ;;
    esac])
if test $GhcWithNativeCodeGen = 'YES'; then
    case $TargetPlatform in
    i386-* | alpha-* | sparc-* )
       ;;
    *)
       echo "Don't have a native-code generator for this platform: $TargetPlatform"
       GhcWithNativeCodeGen='NO'
       ;;
    esac
fi
AC_SUBST(GhcWithNativeCodeGen)

dnl ** include Marlow's deforester in \`hsc'?
GhcWithDeforester='NO'
AC_ARG_ENABLE(deforester,
   [--enable-deforester       build deforester into compiler (HACKERS ONLY)],
   [case "$enableval" in
        yes) GhcWithDeforester='YES'
             ;;
        no)  GhcWithDeforester='NO'
             ;;
        *)   echo "I don't understand this option: --enable-deforester=$enableval"
             exit 1
             ;;
    esac])
AC_SUBST(GhcWithDeforester)

dnl ** include Readline library?
GhcWithReadline='NO'
AC_ARG_ENABLE(readline-library,
   [--enable-readline-library include (GNU) readline library in -syslib GHC],
   [case "$enableval" in
        yes) GhcWithReadline='YES'
             ;;
        no)  GhcWithReadline='NO'
             ;;
        *)   echo "I don't understand this option: --enable-readline-library=$enableval"
             exit 1
             ;;
    esac])
AC_SUBST(GhcWithReadline)

dnl ** include Sockets library?
GhcWithSockets='NO'
AC_ARG_ENABLE(sockets-library,
   [--enable-sockets-library  include the network-interface (sockets) library in -syslib GHC],
   [case "$enableval" in
        yes) GhcWithSockets='YES'
             ;;
        no)  GhcWithSockets='NO'
             ;;
        *)   echo "I don't understand this option: --enable-sockets-library=$enableval"
             exit 1
             ;;
    esac])
AC_SUBST(GhcWithSockets)

dnl ** build the interpreter?
BuildGHCI='NO'
AC_ARG_ENABLE(ghci,
   [--enable-ghci             build Glasgow Haskell interpreter (HACKERS ONLY)],
   [case "$enableval" in
        yes) BuildGHCI='YES'
             ;;
        no)  BuildGHCI='NO'
             ;;
        *)   echo "I don't understand this option: --enable-ghci=$enableval"
             exit 1
             ;;
    esac])
AC_SUBST(BuildGHCI)

# Here, by HACK means, we dump all the GhcBuild_ info
# into a file.  See comment above.
rm -f ghc/mkworld/buildinfo.jm
echo creating ghc/mkworld/buildinfo.jm
cat > ghc/mkworld/buildinfo.jm <<EOF
XCOMM ** DO NOT EDIT! **
XCOMM This file is obliterated every time 'configure' is run!

EOF
for xx in normal p t u mc mr mt mp mg 2s 1s du a b c d e f g h i j k l m n o A B ; do
    eval "yy=\$GhcBuild_$xx"
    echo "#ifndef GhcBuild_$xx"     >> ghc/mkworld/buildinfo.jm
    echo "#define GhcBuild_$xx $yy" >> ghc/mkworld/buildinfo.jm
    echo "#endif"		    >> ghc/mkworld/buildinfo.jm
done

# here ends a very big if DoingGHC = 'ghc' ...
fi

# -------------------------------------------------------------------------
dnl
dnl * `HsLibs' CONFIGURATION STUFF

if test "xxx$DoingHsLibs" = 'xxxhslibs' ; then
# a very big "if"!

dnl ** which Haskell compiler to use on hslibs?
WithHsLibsHc='haskell-compiler-unspecified'
WithHsLibsHcType='HC_UNSPECIFIED'

AC_ARG_WITH(hc-for-hslibs,
   [
*******************************************************************
** \`HsLibs' HASKELL LIBRARIES OPTIONS:

The Haskell compiler to compile the Haskell Libraries suite; this
option, if used, overrides --with-hc=<...>:

    --with-hc-for-hslibs=<Haskell compiler>
          ghc*     => Glasgow Haskell invoked by the name given
                      and you want to use it un-installed ("in-place").],
   [case "$withval" in
        ghc* | glhc* )
                WithHsLibsHc=$withval
                ;;
        in-place )
                WithHsLibsHc='IN-PLACE'
                ;;
        *)      echo "I don't understand this option: --with-hc-for-hslibs=$withval"
                exit 1
                ;;
    esac])

# make sure that what they said makes sense.... set WithHsLibsHcType
case $WithHsLibsHc in
    haskell-compiler-unspecified ) # maybe they said something earlier...
	    if test $WithHc = 'haskell-compiler-unspecified' ; then
		echo "Neither --with-hc nor --with-hc-for-hslibs was properly set"
		exit 1
	    fi
	    ;;
    ghc* | glhc* )
	    WithHsLibsHcType='HC_GLASGOW_GHC'
            AC_CHECK_PROG(have_ghc_hslibs,$WithHsLibsHc,$ac_dir/$ac_word)
            if test -z "$have_ghc_hslibs"; then
                echo "Can't find Glasgow Haskell to compile HsLibs with: $WithHsLibsHc"
		exit 1
            fi
            ;;
    IN-PLACE) WithHsLibsHcType='HC_GLASGOW_GHC'
	    ;;
esac
AC_SUBST(WithHsLibsHc)
AC_SUBST(WithHsLibsHcType)

# Here, by HACK means, we dump all the GhcBuild_ info
# into a file.  See comment above.
rm -f hslibs/mkworld/buildinfo.jm
echo creating hslibs/mkworld/buildinfo.jm
cat > hslibs/mkworld/buildinfo.jm <<EOF
XCOMM ** DO NOT EDIT! **
XCOMM This file is obliterated every time 'configure' is run!

EOF
dnl Do not really know what to put here:
dnl for xx in normal p t u mc mr mt mp mg 2s 1s du a b c d e f g h i j k l m n o A B ; do
dnl     eval "yy=\$GhcBuild_$xx"
dnl    echo "#ifndef GhcBuild_$xx"     >> ghc/mkworld/buildinfo.jm
dnl    echo "#define GhcBuild_$xx $yy" >> ghc/mkworld/buildinfo.jm
dnl    echo "#endif"		    >> ghc/mkworld/buildinfo.jm
dnl done

# here ends a very big if DoingHsLibs = 'hslibs' ...
fi
#
# -------------------------------------------------------------------------
dnl
dnl * `Happy' CONFIGURATION STUFF

if test "xxx$DoingHappy" = 'xxxhappy' ; then
# a very big "if"!

dnl ** which Haskell compiler to use on happy?
WithHappyHc='haskell-compiler-unspecified'
WithHappyHcType='HC_UNSPECIFIED'

AC_ARG_WITH(hc-for-happy,
   [
*******************************************************************
** \`Happy' PARSER-GENERATOR OPTIONS:

The Haskell compiler to compile Happy; this option, if used, overrides
--with-hc=<...>:

    --with-hc-for-happy=<Haskell compiler>
          ghc*     => Glasgow Haskell invoked by the name given
          hbc*     => Chalmers HBC, invoked by the name given
          nhc*     => Niklas Rojemo's "nhc", invoked by the name given
          in-place => Use ghc/driver/ghc; i.e. you've built GHC
                      and you want to use it un-installed ("in-place").],
   [case "$withval" in
        ghc* | glhc* )
                WithHappyHc=$withval
                ;;
        hbc* )  WithHappyHc=$withval
                ;;
        nhc* )  WithHappyHc=$withval
                ;;
        in-place )
                WithHappyHc='IN-PLACE'
                ;;
        *)      echo "I don't understand this option: --with-hc-for-happy=$withval"
                exit 1
                ;;
    esac])

# make sure that what they said makes sense.... set WithHappyHcType
case $WithHappyHc in
    haskell-compiler-unspecified ) # maybe they said something earlier...
	    if test $WithHc = 'haskell-compiler-unspecified' ; then
		echo "Neither --with-hc nor --with-hc-for-happy was properly set"
		exit 1
	    fi
	    ;;
    ghc* | glhc* )
	    WithHappyHcType='HC_GLASGOW_GHC'
            AC_CHECK_PROG(have_ghc_happy,$WithHappyHc,$ac_dir/$ac_word)
            if test -z "$have_ghc_happy"; then
                echo "Can't find Glasgow Haskell to compile Happy with: $WithHappyHc"
		exit 1
            fi
            ;;
    hbc* )  # Look for the dastardly competition
	    WithHappyHcType='HC_CHALMERS_HBC'
            AC_CHECK_PROG(have_hbc,$WithHappyHc,YES,NO)
            if test $have_hbc = 'NO' ; then
                echo "Can't find Chalmers HBC to compile with: $WithHappyHc"
                exit 1
            fi
            ;;
    nhc* )  # Look for Niklas Rojemo's "nhc"
	    WithHappyHcType='HC_ROJEMO_NHC'
            AC_CHECK_PROG(have_nhc,$WithHappyHc,YES,NO)
            if test $have_nhc = 'NO' ; then
                echo "Can't find Niklas Rojemo's NHC to compile with: $WithHappyHc"
                exit 1
            fi
            ;;
    IN-PLACE) WithHappyHcType='HC_GLASGOW_GHC'
	    ;;
esac
AC_SUBST(WithHappyHc)
AC_SUBST(WithHappyHcType)

# here ends a very big if DoingHappy = 'happy' ...
fi
#
# -------------------------------------------------------------------------
dnl
dnl * `Haggis' CONFIGURATION STUFF

if test "xxx$DoingHaggis" = 'xxxhaggis' ; then
# a very big "if"!

dnl ** which Haskell compiler to use on haggis?
WithHaggisHc='haskell-compiler-unspecified'
WithHaggisHcType='HC_UNSPECIFIED'

AC_ARG_WITH(hc-for-haggis,
   [
*******************************************************************
** \`Haggis' HASKELL GUI TOOLKIT OPTIONS:

The Haskell compiler to compile the Haggis toolkit; this option, if
used, overrides --with-hc=<...>:

    --with-hc-for-haggis=<Haskell compiler>
          ghc*     => Glasgow Haskell invoked by the name given
                      and you want to use it un-installed ("in-place").],
   [case "$withval" in
        ghc* | glhc* )
                WithHaggisHc=$withval
                ;;
        in-place )
                WithHaggisHc='IN-PLACE'
                ;;
        *)      echo "I don't understand this option: --with-hc-for-haggis=$withval"
                exit 1
                ;;
    esac])

# make sure that what they said makes sense.... set WithHaggisHcType
case $WithHaggisHc in
    haskell-compiler-unspecified ) # maybe they said something earlier...
	    if test $WithHc = 'haskell-compiler-unspecified' ; then
		echo "Neither --with-hc nor --with-hc-for-haggis was properly set"
		exit 1
	    fi
	    ;;
    ghc* | glhc* )
	    WithHaggisHcType='HC_GLASGOW_GHC'
            AC_CHECK_PROG(have_ghc_haggis,$WithHaggisHc,$ac_dir/$ac_word)
            if test -z "$have_ghc_haggis"; then
                echo "Can't find Glasgow Haskell to compile Haggis with: $WithHaggisHc"
		exit 1
            fi
            ;;
    IN-PLACE) WithHaggisHcType='HC_GLASGOW_GHC'
	    ;;
esac
AC_SUBST(WithHaggisHc)
AC_SUBST(WithHaggisHcType)

# here ends a very big if DoingHaggis = 'haggis' ...
fi
#
# -------------------------------------------------------------------------
dnl
dnl * `Literate' CONFIGURATION STUFF

if test "xxx$DoingLiterate" = 'xxxliterate' ; then
# a very big "if"!

BuildInfoUtils='NO'
AC_ARG_ENABLE(info-utils,
   [
*******************************************************************
** Literate programming system OPTIONS:

--enable-info-utils       build GNU info/makeinfo utilities],
   [case "$enableval" in
        yes) BuildInfoUtils='YES'
             ;;
        no)  BuildInfoUtils='NO'
             ;;
        *)   echo "I don't understand this option: --enable-info-utils=$enableval"
             exit 1
             ;;
    esac])
AC_SUBST(BuildInfoUtils)

# here ends a very big if DoingLiterate = 'literate' ...
fi
#
# -------------------------------------------------------------------------
dnl
dnl * `NoFib' CONFIGURATION STUFF

if test "xxx$DoingNoFib" = 'xxxnofib' ; then
# a very big "if"!

dnl ** which Haskell compiler to test with NoFib?
WithNoFibHc='haskell-compiler-unspecified'
WithNoFibHcType='HC_UNSPECIFIED'

AC_ARG_WITH(hc-for-nofib,
   [
*******************************************************************
** NoFib HASKELL BENCHMARK SUITE OPTIONS:

The Haskell compiler to compile the NoFib programs; this option, if
used, overrides --with-hc=<...>:

    --with-hc-for-nofib=<Haskell compiler>
          ghc*     => Glasgow Haskell invoked by the name given
          hbc*     => Chalmers HBC, invoked by the name given
          nhc*     => Niklas Rojemo's "nhc", invoked by the name given
          in-place => Use ghc/driver/ghc; i.e. you've built GHC
                      and you want to use it un-installed ("in-place").
   ],
   [case "$withval" in
        ghc* | glhc* )
                WithNoFibHc=$withval
                ;;
        hbc* )  WithNoFibHc=$withval
                ;;
        nhc* )  WithNoFibHc=$withval
                ;;
        in-place )
                WithNoFibHc='IN-PLACE'
                ;;
        *)      echo "I don't understand this option: --with-hc-for-nofib=$withval"
                exit 1
                ;;
    esac])

# make sure that what they said makes sense.... set WithHappyHcType
case $WithNoFibHc in
    haskell-compiler-unspecified ) # maybe they said something earlier...
	    if test $WithHc = 'haskell-compiler-unspecified' ; then
		echo "Neither --with-hc nor --with-hc-for-nofib was properly set"
		exit 1
	    fi
	    ;;
    ghc* | glhc* )
	    WithNoFibHcType='HC_GLASGOW_GHC'
            AC_CHECK_PROG(have_ghc_nofib,$WithNoFibHc,$ac_dir/$ac_word)
            if test -z "$have_ghc_nofib"; then
                echo "Can't find Glasgow Haskell to compile NoFib with: $WithNoFibHc"
		exit 1
            fi
            ;;
    hbc* )  # Look for the dastardly competition
	    WithNoFibHcType='HC_CHALMERS_HBC'
            AC_CHECK_PROG(have_hbc,$WithNoFibHc,YES,NO)
            if test $have_hbc = 'NO' ; then
                echo "Can't find Chalmers HBC to compile NoFib with: $WithNoFibHc"
                exit 1
            fi
            ;;
    nhc* )  # Look for Niklas Rojemo's "nhc"
	    WithNoFibHcType='HC_ROJEMO_NHC'
            AC_CHECK_PROG(have_nhc,$WithNoFibHc,YES,NO)
            if test $have_nhc = 'NO' ; then
                echo "Can't find Niklas Rojemo's NHC to compile NoFib with: $WithNoFibHc"
                exit 1
            fi
            ;;
    IN-PLACE) WithNoFibHcType='HC_GLASGOW_GHC'
	    ;;
esac
AC_SUBST(WithNoFibHc)
AC_SUBST(WithNoFibHcType)

dnl ** what mkworld \`setup' should be used?
AC_ARG_WITH(setup,
   [
--with-setup=<setup> : What mkworld \`setup' should be used?
                       Choices: ghc, hbc, nhc
],
   [case "$withval" in
        ghc )   MkWorldSetup='ghc'
                ;;
        hbc )   MkWorldSetup='hbc'
                ;;
        nhc )   MkWorldSetup='nhc'
		;;
        *)      echo "I don't understand this option: --with-setup=$withval"
                exit 1
                ;;
    esac])

if test $MkWorldSetup = 'std' ; then
    echo 'You must do --with-setup=... (one of: ghc, hbc, or nhc) for NoFib'
    exit 1
fi

# ---------------------------------------
# What sets of tests should be run.
#
IncludeRealNoFibTests='YES'	# defaults
IncludeSpectralNoFibTests='YES'
IncludeImaginaryNoFibTests='YES'
IncludeSpecialiseNoFibTests='NO'
IncludeGHC_ONLYNoFibTests='NO'
IncludePRIVATENoFibTests='NO'
IncludeParallelNoFibTests='NO'

dnl ** should *all* NoFib tests be run?
# special catch-all variant
AC_ARG_ENABLE(all-tests,
   [Possibly turn on *all* of the possible tests (a sane choice
only if using GHC):

--enable-all-tests    do *all* tests],
   [case "$enableval" in
        yes) IncludeGHC_ONLYNoFibTests='YES'
	     IncludeSpecialiseNoFibTests='YES'
	     IncludePRIVATENoFibTests='YES'
	     IncludeParallelNoFibTests='YES'
             ;;
        no)  IncludeGHC_ONLYNoFibTests='NO'
	     IncludeSpecialiseNoFibTests='NO'
	     IncludePRIVATENoFibTests='NO'
	     IncludeParallelNoFibTests='NO'

	     IncludeRealNoFibTests='NO'
	     IncludeSpectralNoFibTests='NO'
	     IncludeImaginaryNoFibTests='NO'
             ;;
        *)   echo "I don't understand this option: --enable-all-tests=$enableval"
             exit 1
             ;;
    esac])

dnl ** turn on/off individual categories of tests...
# individual categories
AC_ARG_ENABLE(imaginary-tests,
   [
Enable/disable individual categories of tests:

--disable-imaginary-tests do *not* include imaginary tests],
   [case "$enableval" in
        yes) IncludeImaginaryNoFibTests='YES'
             ;;
        no)  IncludeImaginaryNoFibTests='NO'
             ;;
        *)   echo "I don't understand this option: --enable-imaginary-tests=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(spectral-tests,
   [--disable-spectral-tests  do *not* include spectral tests],
   [case "$enableval" in
        yes) IncludeSpectralNoFibTests='YES'
             ;;
        no)  IncludeSpectralNoFibTests='NO'
             ;;
        *)   echo "I don't understand this option: --enable-spectral-tests=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(real-tests,
   [--disable-real-tests      do *not* include real tests],
   [case "$enableval" in
        yes) IncludeRealNoFibTests='YES'
             ;;
        no)  IncludeRealNoFibTests='NO'
             ;;
        *)   echo "I don't understand this option: --enable-real-tests=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(GHC-ONLY-tests,
   [--enable-GHC-ONLY-tests   include GHC_ONLY tests],
   [case "$enableval" in
        yes) IncludeGHC_ONLYNoFibTests='YES'
             ;;
        no)  IncludeGHC_ONLYNoFibTests='NO'
             ;;
        *)   echo "I don't understand this option: --enable-GHC-ONLY-tests=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(specialise-tests,
   [--enable-specialise-tests  include specialisation tests],
   [case "$enableval" in
        yes) IncludeSpecialiseNoFibTests='YES'
             ;;
        no)  IncludeSpecialiseNoFibTests='NO'
             ;;
        *)   echo "I don't understand this option: --enable-specialise-tests=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(PRIVATE-tests,
   [--enable-PRIVATE-tests    include PRIVATE tests],
   [case "$enableval" in
        yes) IncludePRIVATENoFibTests='YES'
             ;;
        no)  IncludePRIVATENoFibTests='NO'
             ;;
        *)   echo "I don't understand this option: --enable-PRIVATE-tests=$enableval"
             exit 1
             ;;
    esac])

AC_ARG_ENABLE(parallel-tests,
   [--enable-parallel-tests   include parallel tests
],
   [case "$enableval" in
        yes) IncludeParallelNoFibTests='YES'
             ;;
        no)  IncludeParallelNoFibTests='NO'
             ;;
        *)   echo "I don't understand this option: --enable-parallel-tests=$enableval"
             exit 1
             ;;
    esac])

dnl not AC_SUBSTd because of 99-command seds (sigh)
dnl (See what follows instead)
dnl AC_SUBST(IncludeRealNoFibTests)
dnl AC_SUBST(IncludeSpectralNoFibTests)
dnl AC_SUBST(IncludeImaginaryNoFibTests)
dnl AC_SUBST(IncludeGHC_ONLYNoFibTests)
dnl AC_SUBST(IncludeSpecialiseNoFibTests)
dnl AC_SUBST(IncludePRIVATENoFibTests)
dnl AC_SUBST(IncludeParallelNoFibTests)

# Here, by HACK means, we dump all the Include*NoFibTests info
# into a file.  See comment above.
rm -f nofib/mkworld/buildinfo.jm
echo creating nofib/mkworld/buildinfo.jm
cat > nofib/mkworld/buildinfo.jm <<EOF
XCOMM ** DO NOT EDIT! **
XCOMM This file is obliterated every time 'configure' is run!

EOF
for xx in Real Spectral Imaginary GHC_ONLY Specialise PRIVATE Parallel ; do
    eval "yy=\$Include${xx}NoFibTests"
    echo "#ifndef Include${xx}NoFibTests"     >> nofib/mkworld/buildinfo.jm
    echo "#define Include${xx}NoFibTests $yy" >> nofib/mkworld/buildinfo.jm
    echo "#endif"			      >> nofib/mkworld/buildinfo.jm
done

# here ends a very big if DoingNoFib = 'nofib' ...
fi
#
# -------------------------------------------------------------------------
dnl
dnl * extract non-header files with substitution (end)
#
AC_SUBST(MkWorldSetup)

AC_OUTPUT(Makefile STARTUP mkworld/site.jm mkworld/platform.h mkworld/config.h $ghc_mkworld_site_ghc_jm $ghc_includes_platform_h $hslibs_mkworld_site_hslibs_jm $nofib_mkworld_site_nofib_jm)

echo '************************************************'
echo '*** NOW DO: sh < STARTUP'
echo '************************************************'
exit 0
